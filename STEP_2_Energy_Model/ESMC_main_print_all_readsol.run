################################################################################
################################################################################                                                    
##																			  ##
##                     			SETTING PROBLEM								  ##                                                    
##																			  ##
################################################################################
################################################################################

# Load standard model
model ESMC_model_AMPL.mod;

# Load standard data
data ESMC_indep.dat # not TDs depending data, not countries depending data
data ESMC_countries.dat   # not TDs depending data, but countries depending data
data ESMC_12TD.dat; # TDs depending data


################################################################################
################################################################################                                                    
##																			  ##
##                      	SOLVER OPTIONS       							  ##                                                    
##																			  ##
################################################################################
################################################################################

option solver cplex;


option show_stats 1; # show statistics

option cplex_options  'mipdisplay 5 mipinterval 1000'; 
option cplex_options $cplex_options 'baropt predual=-1';
option log_file 'output/log_print_all.csv';   #write the log in a .csv file. Create the file before running.


option cplex_options $cplex_options 'mipgap 0.01 '; 
option cplex_options $cplex_options 'timelimit 64800 '; 

#READ# option cplex_options $cplex_options 'startbasis ./output/solution.bas '; # to read previously existing path
#SAVE# option cplex_options $cplex_options 'endbasis ./output/solution.bas '; # to write how to solve


################################################################################
################################################################################                                                    
##																			  ##
##                      	RUN & SAVE PATH      							  ##                                                    
##																			  ##
################################################################################
################################################################################


param PathName symbolic default "output";

		#let re_share_primary := 0.5;

		print PathName;
		
		print "gwp_limit_global", gwp_limit_global;

		# Saving and starting from last solution. Starting from last solution is not very efficient.
		# 
		option cplex_options $cplex_options 'startsol ./output/solution.sol '; # to read previously existing file
		#option cplex_options $cplex_options 'endsol ./output/solution.sol '; # to write file 
		
		option times 1; # show time
		option gentimes 1; # show time

		solve;
		
		print "gwp_global", sum{c in COUNTRIES} TotalGWP[c];
		print "global_cost", sum{c in COUNTRIES} TotalCost[c];
		
		display solve_result_num;
		display _solve_elapsed_time;

		## Saving sets and parameters to output file

		option times 0; # show time
		option gentimes 0; # show time

		
		if solve_result = "limit" # To avoid post treatment error
		then print "TIME OUT"; 
		else {
		
			################################################################################
			################################################################################                                                    
			##																			  ##
			##                     			SAVING RESULTS								  ##                                                    
			##																			  ##
			################################################################################
			################################################################################
			## Saving sets and parameters to output file
			option show_stats 0; # show statistics
			option times 0; # show time
			option gentimes 0; # show time
			
			
			###############################################################################                                                    
			#																			  #
			#                     			  LOCAL SYSTEMS    							  #                                                    
			#																			  #
			###############################################################################
			
			
			for {c in COUNTRIES}{
				#########################################
				#				Year summary			#
				#########################################
				
				#------------------------------------------
				## Print cost breakdown to csv file.
				#------------------------------------------
				print ("--------------SAVING COST  " & c & " -----------");
				printf "%s;%s;%s;%s\n", "Name","C_inv [M€/y]","C_maint [M€/y]","C_op [M€/y]" > ( PathName & "/cost_breakdown_" & c & ".csv"); 
				for {i in TECHNOLOGIES union RESOURCES}{if i in TECHNOLOGIES
				then
						printf "%s;%.6f;%.6f;%.6f\n", i, tau [c,i] * C_inv [c,i], C_maint [c,i], 0 > ( PathName & "/cost_breakdown_" & c & ".csv"); 
				else
						printf "%s;%.6f;%.6f;%.6f\n", i, 0, 0, C_op[c,i] > ( PathName & "/cost_breakdown_" & c & ".csv");
				}
				printf "%s;%.6f;%.6f;%.6f", "Total [M€/y]", sum{i in TECHNOLOGIES} (tau [c,i] * C_inv [c,i]), sum{i in TECHNOLOGIES} C_maint [c,i], sum{i in RESOURCES} C_op[c,i] > ( PathName & "/cost_breakdown_" & c & ".csv");
				

				#------------------------------------------
				## Print GWP breakdown
				#------------------------------------------
				print ("--------------SAVING GWP  " & c & " -----------");

				printf "%s;%s;%s\n", "Name", "GWP_constr [kt_CO2eq/y]", "GWP_op [kt_CO2eq/y]" > ( PathName & "/gwp_breakdown_" & c & ".csv");  
				for {i in TECHNOLOGIES union RESOURCES}{if i in TECHNOLOGIES
				then
						printf "%s;%.6f;%.6f\n", i, GWP_constr [c,i] / lifetime [c,i], 0 > ( PathName & "/gwp_breakdown_" & c & ".csv"); 
				else
						printf "%s;%.6f;%.6f\n", i, 0, GWP_op [c,i] > ( PathName & "/gwp_breakdown_" & c & ".csv"); 
				}
				
				printf "%s;%.6f;%.6f", "Total [ktCO2-eq/y]", sum{i in TECHNOLOGIES} (GWP_constr [c,i] / lifetime [c,i]), sum{i in RESOURCES} GWP_op [c,i] > ( PathName & "/gwp_breakdown_" & c & ".csv"); 


				#------------------------------------------
				## Print losses to csv file
				#------------------------------------------
				print ("--------------SAVING losses  " & c & " -----------");
				
				printf "EUD;Losses [GWh/y]" > ( PathName & "/losses_" & c & ".csv"); 
				for {i in END_USES_TYPES}{
						printf "\n%s;%.3f", i, sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t] }(Network_losses [c,i,h,td] )  > ( PathName & "/losses_" & c & ".csv"); 
				}

				#------------------------------------------
				## Print ASSETS to csv file
				#------------------------------------------
				print ("--------------SAVING ASSETS  " & c & " -----------");
				printf "TECHNOLOGIES;c_inv;c_maint;lifetime;f_min;f;f_max;fmin_perc;f_perc;fmax_perc;c_p_actual;c_p;tau;gwp_constr" > ( PathName & "/Assets_" & c & ".csv"); 
				printf "\nUNITS;[Meuro/GW];[Meuro/(GW*y)];[y];[GW or GWh];[GW or GWh];[GW or GWh];[0-1];[0-1];[0-1];[0-1];[0-1];[-];[ktCO2-eq./GW or GWh]" > ( PathName & "/Assets_" & c & ".csv"); 
				for {i in END_USES_TYPES, tech in TECHNOLOGIES_OF_END_USES_TYPE[i]}{
					printf "\n%s;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f",tech,
							C_inv[c,tech],C_maint[c,tech],lifetime[c,tech],f_min[c,tech],F[c,tech],f_max[c,tech],
							fmin_perc[c,tech],if sum {j2 in 
			TECHNOLOGIES_OF_END_USES_TYPE[i], t2 in PERIODS, h2 in HOUR_OF_PERIOD[t2], td2 in TYPICAL_DAY_OF_PERIOD[t2]} (F_t [c,j2, h2, 
			td2] ) > 0 then sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t [c,tech,h,td] ) / sum {j2 in 
			TECHNOLOGIES_OF_END_USES_TYPE[i], t2 in PERIODS, h2 in HOUR_OF_PERIOD[t2], td2 in TYPICAL_DAY_OF_PERIOD[t2]} (F_t [c,j2, h2, 
			td2] )) else 0,
							fmax_perc[c,tech],if F[c,tech] >0 then sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t [c,tech,h,td]) / (8760* F[c,tech])) else 0,c_p[c,tech],tau[c,tech],GWP_constr[c,tech] > ( PathName & "/Assets_" & c & ".csv"); 
				}
				for {tech in STORAGE_TECH union INFRASTRUCTURE}{
					printf "\n%s;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f",tech,
							C_inv[c,tech],C_maint[c,tech],lifetime[c,tech],f_min[c,tech],F[c,tech],f_max[c,tech],
							fmin_perc[c,tech],
							-1,
							fmax_perc[c,tech],c_p[c,tech],c_p[c,tech],tau[c,tech],GWP_constr[c,tech] > ( PathName & "/Assets_" & c & ".csv"); 
				}
				
				#------------------------------------------
				# YEARLY BALANCE
				#------------------------------------------
				print ("--------- SAVING Yearly balances  " & c & " --------");

				printf "Tech" > ( PathName & "/YearBalance_" & c & ".csv");
				for {l in LAYERS}{
					printf ";%s",l > ( PathName & "/YearBalance_" & c & ".csv");
				}
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf "\n%s", i > ( PathName & "/YearBalance_" & c & ".csv");
					for {l in LAYERS}{if i in TECHNOLOGIES
					then 
						printf ";%f", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
										layers_in_out[i, l] * F_t [c, i, h, td] > ( PathName & "/YearBalance_" & c & ".csv");
					else
						printf ";%f", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
										layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]) > ( PathName & "/YearBalance_" & c & ".csv");
					}
				}
				for {j in STORAGE_TECH}{
					printf "\n%s", j > ( PathName & "/YearBalance_" & c & ".csv");
					for {l in LAYERS}{
						printf ";%f", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
										(Storage_out [c, j, l, h, td] - Storage_in [c, j, l, h, td]) > ( PathName & "/YearBalance_" & c & ".csv");
					}
				}
				printf "\nEND_USES_DEMAND" > ( PathName & "/YearBalance_" & c & ".csv");
				for {l in LAYERS}{
					printf ";%f", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
									End_uses [c, l, h, td] > ( PathName & "/YearBalance_" & c & ".csv");
				}

				#------------------------------------------
				# Exchanges balance printing
				#------------------------------------------
				print ("--------- SAVING Exchanges balance  " & c & " --------");

				
				printf "RESOURCES" > (PathName & "/exch_" & c & ".csv");
				for {c2 in COUNTRIES}{
					printf ";%s", c2 > (PathName & "/exch_" & c & ".csv");
				}
				
				for{i in RESOURCES}{
					printf "\n%s", i > (PathName & "/exch_" & c & ".csv");
					for{c2 in COUNTRIES}{
						printf ";%.6f", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Exch_imp[c, c2, i, h, td]-Exch_exp[c, c2, i, h, td]) > (PathName & "/exch_" & c & ".csv");
					}
				}
				

				#------------------------------------------
				# Resources balance
				#------------------------------------------
				print ("--------- SAVING Resources balances  " & c & " --------");

				
				printf "RESOURCES" > (PathName & "/resources_" & c & ".csv");
				printf ";R_t_local;R_t_exterior;R_t_import;R_t_export" > (PathName & "/resources_" & c & ".csv");
				for{i in RESOURCES}{
					printf "\n%s", i  > (PathName & "/resources_" & c & ".csv");
					printf ";%.6f;%.6f;%.6f;%.6f", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} R_t_local[c, i, h, td], sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} R_t_exterior[c, i, h, td],
					sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} R_t_import[c, i, h, td], sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} R_t_export[c, i, h, td] > (PathName & "/resources_" & c & ".csv");
			
				}
				



				#########################################
				#			YEAR HOURLY DATA			#
				#########################################


				#------------------------------------------
				#    STORAGE distribution CURVES
				#------------------------------------------
				print ("--------------SAVING elec Storage YEAR  " & c & " -----------");
				 # storage curves
				printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & c & ".csv");
				for {i in STORAGE_TECH diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
					printf ";%s", i > ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & c & ".csv");
				}
				for {i in STORAGE_TECH diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
					printf ";%s_in" ,{l in LAYERS: storage_eff_in  [i,l] > 0} i > ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & c & ".csv");
					printf ";%s_out",{l in LAYERS: storage_eff_out [i,l] > 0} i > ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & c & ".csv");
				}
				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td  > ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & c & ".csv");
					for {i in STORAGE_TECH diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
						printf ";%f", Storage_level[c, i, t] > ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & c & ".csv");
					}
					for {i in STORAGE_TECH diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
						printf ";%f", (sum {l in LAYERS: storage_eff_in [i,l] > 0}
										-(Storage_in [c, i, l, h, td] * storage_eff_in [i, l]))
								> ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & c & ".csv");
						printf ";%f", (sum {l in LAYERS: storage_eff_in [i,l] > 0}
										(Storage_out [c,i, l, h, td] / storage_eff_out [i, l]))
								> ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & c & ".csv");
						
					}
				}

				print ("--------------SAVING TS Storage YEAR  " & c & " -----------");

				# storage curves
				printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/Distri_TS_" & c & ".csv");
				for {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] union STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
					printf ";%s", i > ( PathName & "/hourly_data_year" & "/Distri_TS_" & c & ".csv");
				}
				for {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] union STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
					printf ";%s_in" ,{l in LAYERS: storage_eff_in  [i,l] > 0} i > ( PathName & "/hourly_data_year" & "/Distri_TS_" & c & ".csv");
					printf ";%s_out",{l in LAYERS: storage_eff_out [i,l] > 0} i > ( PathName & "/hourly_data_year" & "/Distri_TS_" & c & ".csv");
				}
				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td  > ( PathName & "/hourly_data_year" & "/Distri_TS_" & c & ".csv");
					for {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] union STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
						printf ";%f", Storage_level[c, i, t] > ( PathName & "/hourly_data_year" & "/Distri_TS_" & c & ".csv");
					}
					for {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] union STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
						printf ";%f", (sum {l in LAYERS: storage_eff_in [i,l] > 0}
										-(Storage_in [c, i, l, h, td] * storage_eff_in [i, l]))
								> ( PathName & "/hourly_data_year" & "/Distri_TS_" & c & ".csv");
						printf ";%f", (sum {l in LAYERS: storage_eff_in [i,l] > 0}
										(Storage_out [c, i, l, h, td] / storage_eff_out [i, l]))
								> ( PathName & "/hourly_data_year" & "/Distri_TS_" & c & ".csv");
						
					}
				}

				#------------------------------------------
				# LAYERS FLUXES
				#------------------------------------------
				print ("--------------SAVING Elec Layer YEAR  " & c & " -----------");

				printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/ElecLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
					printf ";%s",i > ( PathName & "/hourly_data_year" & "/ElecLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/ElecLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/ElecLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_year" & "/ElecLayers_" & c & ".csv");

				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/ElecLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then
							printf ";%f",(layers_in_out[i, "ELECTRICITY"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_year" & "/ElecLayers_" & c & ".csv");
					else
							printf ";%f",(layers_in_out[i, "ELECTRICITY"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_year" & "/ElecLayers_" & c & ".csv");
					}
					for {j in STORAGE_TECH}{
						printf ";%f",(-Storage_in [c, j, "ELECTRICITY", h, td]) > ( PathName & "/hourly_data_year" & "/ElecLayers_" & c & ".csv");
						printf ";%f", (Storage_out [c, j, "ELECTRICITY", h, td]) > ( PathName & "/hourly_data_year" & "/ElecLayers_" & c & ".csv");
					}
					printf ";%f", -End_uses [c, "ELECTRICITY", h, td]  > ( PathName & "/hourly_data_year" & "/ElecLayers_" & c & ".csv");
				}

				print ("--------------SAVING LT Layer YEAR  " & c & " -----------");

				printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/LTLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
					printf ";%s",i > ( PathName & "/hourly_data_year" & "/LTLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/LTLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/LTLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_year" & "/LTLayers_" & c & ".csv");

				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/LTLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{if i in TECHNOLOGIES
					then 
						printf ";%f",(sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (layers_in_out[i, l] * F_t [c, i, h, td])) > ( PathName & "/hourly_data_year" & "/LTLayers_" & c & ".csv");
					else
						printf ";%f",(sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]))) > ( PathName & "/hourly_data_year" & "/LTLayers_" & c & ".csv");
					}
					for {j in STORAGE_TECH }{
						printf ";%f",sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]}(-Storage_in [c, j, l, h, td]) > ( PathName & "/hourly_data_year" & "/LTLayers_" & c & ".csv");
						printf ";%f",sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (Storage_out [c, j, l, h, td]) > ( PathName & "/hourly_data_year" & "/LTLayers_" & c & ".csv");
					}
					printf ";%f", sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (-End_uses [c, l, h, td])  > ( PathName & "/hourly_data_year" & "/LTLayers_" & c & ".csv");
				}

				print ("--------------SAVING HT Layer YEAR  " & c & " -----------");



				printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/HTLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
					printf ";%s",i > ( PathName & "/hourly_data_year" & "/HTLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/HTLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/HTLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_year" & "/HTLayers_" & c & ".csv");

				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/HTLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{if i in TECHNOLOGIES
					then 
						printf ";%f",(layers_in_out[i, "HEAT_HIGH_T"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_year" & "/HTLayers_" & c & ".csv");
					else
						printf ";%f",(layers_in_out[i, "HEAT_HIGH_T"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_year" & "/HTLayers_" & c & ".csv");
					}
					for {j in STORAGE_TECH }{
						printf ";%f",(-Storage_in [c, j, "HEAT_HIGH_T", h, td]) > ( PathName & "/hourly_data_year" & "/HTLayers_" & c & ".csv");
						printf ";%f", (Storage_out [c, j, "HEAT_HIGH_T", h, td]) > ( PathName & "/hourly_data_year" & "/HTLayers_" & c & ".csv");
					}
					printf ";%f", -End_uses [c, "HEAT_HIGH_T", h, td]  > ( PathName & "/hourly_data_year" & "/HTLayers_" & c & ".csv");
				}

				print ("--------------SAVING PASSANGER Layer YEAR  " & c & " -----------");

				printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf ";%s",i > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & c & ".csv");

				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then 
						printf ";%f",(sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (layers_in_out[i, l] * F_t [c, i, h, td])) > 
				( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & c & ".csv");
				else
						printf ";%f",(sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]))) > 
				( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & c & ".csv");
					}
					for {j in STORAGE_TECH }{
						printf ";%f",sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]}(-Storage_in [c, j, l, h, td]) > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & c & ".csv");
						printf ";%f",sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]}(-Storage_out[c, j, l, h, td]) > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & c & ".csv");
					}
					printf ";%f", sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (-End_uses [c, l, h, td] ) > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & c & ".csv");
				}

				print ("--------------SAVING FREIGHT Layer YEAR  " & c & " -----------");

				printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf ";%s",i > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & c & ".csv");

				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then 
						printf ";%f",(sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (layers_in_out[i, l] * F_t [c, i, h, td])) > 
				( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & c & ".csv");
				else
						printf ";%f",(sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]))) > 
				( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & c & ".csv");
					}
					for {j in STORAGE_TECH }{
						printf ";%f",sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]}(-Storage_in [c, j, l, h, td]) > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & c & ".csv");
						printf ";%f",sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]}(-Storage_out[c, j, l, h, td]) > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & c & ".csv");
					}
					printf ";%f", sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (-End_uses [c, l, h, td] )  > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & c & ".csv");
				}
				
				
				print ("--------------SAVING Cooling Layer YEAR  " & c & " -----------");

				printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
					printf ";%s",i > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & c & ".csv");

				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then
							printf ";%f",(layers_in_out[i, "SPACE_COOLING"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & c & ".csv");
					else
							printf ";%f",(layers_in_out[i, "SPACE_COOLING"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & c & ".csv");
					}
					for {j in STORAGE_TECH}{
						printf ";%f",(-Storage_in [c, j, "SPACE_COOLING", h, td]) > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & c & ".csv");
						printf ";%f", (Storage_out [c, j, "SPACE_COOLING", h, td]) > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & c & ".csv");
					}
					printf ";%f", -End_uses [c, "SPACE_COOLING", h, td]  > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & c & ".csv");
				}


				print ("--------------SAVING H2Layer YEAR  " & c & " -----------");

				printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/H2Layers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf ";%s",i > ( PathName & "/hourly_data_year" & "/H2Layers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/H2Layers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/H2Layers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_year" & "/H2Layers_" & c & ".csv");

				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/H2Layers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then 
						printf ";%f",(layers_in_out[i, "H2"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_year" & "/H2Layers_" & c & ".csv");
					else
						printf ";%f",(layers_in_out[i, "H2"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_year" & "/H2Layers_" & c & ".csv");
						
					}
					for {j in STORAGE_TECH }{
						printf ";%f",(-Storage_in [c, j, "H2", h, td]) > ( PathName & "/hourly_data_year" & "/H2Layers_" & c & ".csv");
						printf ";%f", (Storage_out [c, j, "H2", h, td]) > ( PathName & "/hourly_data_year" & "/H2Layers_" & c & ".csv");
					}
					printf ";%f", -End_uses [c, "H2", h, td]  > ( PathName & "/hourly_data_year" & "/H2Layers_" & c & ".csv");
				}
				

				print ("--------------SAVING NGLayer YEAR  " & c & " -----------");

				printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/NGLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf ";%s",i > ( PathName & "/hourly_data_year" & "/NGLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/NGLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/NGLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_year" & "/NGLayers_" & c & ".csv");

				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/NGLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then 
						printf ";%f",(layers_in_out[i, "NG"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_year" & "/NGLayers_" & c & ".csv");
					else
						printf ";%f",(layers_in_out[i, "NG"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_year" & "/NGLayers_" & c & ".csv");
						
					}
					for {j in STORAGE_TECH }{
						printf ";%f",(-Storage_in [c, j, "NG", h, td]) > ( PathName & "/hourly_data_year" & "/NGLayers_" & c & ".csv");
						printf ";%f", (Storage_out [c, j, "NG", h, td]) > ( PathName & "/hourly_data_year" & "/NGLayers_" & c & ".csv");
					}
					printf ";%f", -End_uses [c, "NG", h, td]  > ( PathName & "/hourly_data_year" & "/NGLayers_" & c & ".csv");
				}
				
				
				print ("--------------SAVING SLFLayer YEAR  " & c & " -----------");

				printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/SLFLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf ";%s",i > ( PathName & "/hourly_data_year" & "/SLFLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/SLFLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/SLFLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_year" & "/SLFLayers_" & c & ".csv");

				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/SLFLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then 
						printf ";%f",(layers_in_out[i, "SLF"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_year" & "/SLFLayers_" & c & ".csv");
					else
						printf ";%f",(layers_in_out[i, "SLF"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_year" & "/SLFLayers_" & c & ".csv");
						
					}
					for {j in STORAGE_TECH }{
						printf ";%f",(-Storage_in [c, j, "SLF", h, td]) > ( PathName & "/hourly_data_year" & "/SLFLayers_" & c & ".csv");
						printf ";%f", (Storage_out [c, j, "SLF", h, td]) > ( PathName & "/hourly_data_year" & "/SLFLayers_" & c & ".csv");
					}
					printf ";%f", -End_uses [c, "SLF", h, td]  > ( PathName & "/hourly_data_year" & "/SLFLayers_" & c & ".csv");
				}
				
				

				#------------------------------------------
				# Exchanges printing
				#------------------------------------------
				print ("--------- SAVING Exchanges YEAR  " & c & " --------");
				
				printf "Period;HourofPeriod;TD" > (PathName & "/hourly_data_year" & "/exch_" & c & ".csv");
				for {i in RESOURCES}{
					for {c2 in COUNTRIES}{
						printf ";%s", i > (PathName & "/hourly_data_year" & "/exch_" & c & ".csv");
					}
				}
				printf "\n(Unit : [GW]);;" > (PathName & "/hourly_data_year" & "/exch_" & c & ".csv");
				
				for {i in RESOURCES}{
				for {c2 in COUNTRIES}{
						printf ";%s", c2 > (PathName & "/hourly_data_year" & "/exch_" & c & ".csv");
				}
				}
				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td   > (PathName & "/hourly_data_year" & "/exch_" & c & ".csv");
					for {i in RESOURCES}{
						for {c2 in COUNTRIES}{
							printf ";%.6f", (Exch_imp[c, c2, i, h, td]-Exch_exp[c, c2, i, h, td]) > (PathName & "/hourly_data_year" & "/exch_" & c & ".csv");
						}
					}	
				}
				

				#------------------------------------------
				# Resources balance
				#------------------------------------------
				print ("--------- SAVING Resources balance YEAR  " & c & " --------");
				
				printf "Period;HourofPeriod;TD" > (PathName & "/hourly_data_year" & "/resources_" & c & ".csv");
				for {i in RESOURCES}{
						printf ";%s;%s;%s;%s", i, i, i, i > (PathName & "/hourly_data_year" & "/resources_" & c & ".csv");
				}
				printf "\n" > (PathName & "/hourly_data_year" & "/resources_" & c & ".csv");
				printf "(Unit : [GW]);;" > (PathName & "/hourly_data_year" & "/resources_" & c & ".csv");
				for {i in RESOURCES}{
						printf ";R_t_local;R_t_exterior;R_t_import;R_t_export" > (PathName & "/hourly_data_year" & "/resources_" & c & ".csv");
				}
				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n%d;%d;%d",t,h,td   > (PathName & "/hourly_data_year" & "/resources_" & c & ".csv");
					for {i in RESOURCES}{
						printf ";%.6f;%.6f;%.6f;%.6f", R_t_local[c, i, h, td], R_t_exterior[c, i, h, td], R_t_import[c, i, h, td], R_t_export[c, i, h, td] > (PathName & "/hourly_data_year" & "/resources_" & c & ".csv");
					}
				}
				
				
				
				
				#########################################
				#			TD HOURLY DATA				#
				#########################################
				
				# not printing storage as we need t in PERIODS for storage level

				#------------------------------------------
				# LAYERS FLUXES
				#------------------------------------------
				print ("--------------SAVING Elec Layer TD " & c & " -----------");

				printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
					printf ";%s",i > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & c & ".csv");

				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then
							printf ";%f",(layers_in_out[i, "ELECTRICITY"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & c & ".csv");
					else
							printf ";%f",(layers_in_out[i, "ELECTRICITY"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & c & ".csv");
					}
					for {j in STORAGE_TECH}{
						printf ";%f",(-Storage_in [c, j, "ELECTRICITY", h, td]) > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & c & ".csv");
						printf ";%f", (Storage_out [c, j, "ELECTRICITY", h, td]) > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & c & ".csv");
					}
					printf ";%f", -End_uses [c, "ELECTRICITY", h, td]  > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & c & ".csv");
				}

				print ("--------------SAVING LT Layer TD " & c & " -----------");

				printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/LTLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
					printf ";%s",i > ( PathName & "/hourly_data_TD" & "/LTLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/LTLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/LTLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/LTLayers_" & c & ".csv");

				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/LTLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{if i in TECHNOLOGIES
					then 
						printf ";%f",(sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (layers_in_out[i, l] * F_t [c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/LTLayers_" & c & ".csv");
					else
						printf ";%f",(sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]))) > ( PathName & "/hourly_data_TD" & "/LTLayers_" & c & ".csv");
					}
					for {j in STORAGE_TECH }{
						printf ";%f",sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]}(-Storage_in [c, j, l, h, td]) > ( PathName & "/hourly_data_TD" & "/LTLayers_" & c & ".csv");
						printf ";%f",sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (Storage_out [c, j, l, h, td]) > ( PathName & "/hourly_data_TD" & "/LTLayers_" & c & ".csv");
					}
					printf ";%f", sum {l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (-End_uses [c, l, h, td])  > ( PathName & "/hourly_data_TD" & "/LTLayers_" & c & ".csv");
				}

				print ("--------------SAVING HT Layer TD " & c & " -----------");

				printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/HTLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
					printf ";%s",i > ( PathName & "/hourly_data_TD" & "/HTLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/HTLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/HTLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/HTLayers_" & c & ".csv");

				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/HTLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{if i in TECHNOLOGIES
					then 
						printf ";%f",(layers_in_out[i, "HEAT_HIGH_T"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_TD" & "/HTLayers_" & c & ".csv");
					else
						printf ";%f",(layers_in_out[i, "HEAT_HIGH_T"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/HTLayers_" & c & ".csv");
					}
					for {j in STORAGE_TECH }{
						printf ";%f",(-Storage_in [c, j, "HEAT_HIGH_T", h, td]) > ( PathName & "/hourly_data_TD" & "/HTLayers_" & c & ".csv");
						printf ";%f", (Storage_out [c, j, "HEAT_HIGH_T", h, td]) > ( PathName & "/hourly_data_TD" & "/HTLayers_" & c & ".csv");
					}
					printf ";%f", -End_uses [c, "HEAT_HIGH_T", h, td]  > ( PathName & "/hourly_data_TD" & "/HTLayers_" & c & ".csv");
				}

				print ("--------------SAVING PASSANGER Layer TD " & c & " -----------");

				printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf ";%s",i > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & c & ".csv");

				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then 
						printf ";%f",(sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (layers_in_out[i, l] * F_t [c, i, h, td])) > 
				( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & c & ".csv");
				else
						printf ";%f",(sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]))) > 
				( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & c & ".csv");
					}
					for {j in STORAGE_TECH }{
						printf ";%f",sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]}(-Storage_in [c, j, l, h, td]) > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & c & ".csv");
						printf ";%f",sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]}(-Storage_out[c, j, l, h, td]) > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & c & ".csv");
					}
					printf ";%f", sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (-End_uses [c, l, h, td] ) > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & c & ".csv");
				}

				print ("--------------SAVING FREIGHT Layer TD " & c & " -----------");

				printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf ";%s",i > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & c & ".csv");

				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then 
						printf ";%f",(sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (layers_in_out[i, l] * F_t [c, i, h, td])) > 
				( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & c & ".csv");
				else
						printf ";%f",(sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]))) > 
				( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & c & ".csv");
					}
					for {j in STORAGE_TECH }{
						printf ";%f",sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]}(-Storage_in [c, j, l, h, td]) > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & c & ".csv");
						printf ";%f",sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]}(-Storage_out[c, j, l, h, td]) > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & c & ".csv");
					}
					printf ";%f", sum {l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (-End_uses [c, l, h, td] )  > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & c & ".csv");
				}
				
				
				print ("--------------SAVING Cooling Layer TD " & c & " -----------");

				printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
					printf ";%s",i > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & c & ".csv");

				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then
							printf ";%f",(layers_in_out[i, "SPACE_COOLING"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & c & ".csv");
					else
							printf ";%f",(layers_in_out[i, "SPACE_COOLING"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & c & ".csv");
					}
					for {j in STORAGE_TECH}{
						printf ";%f",(-Storage_in [c, j, "SPACE_COOLING", h, td]) > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & c & ".csv");
						printf ";%f", (Storage_out [c, j, "SPACE_COOLING", h, td]) > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & c & ".csv");
					}
					printf ";%f", -End_uses [c, "SPACE_COOLING", h, td]  > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & c & ".csv");
				}


				print ("--------------SAVING H2Layer TD " & c & " -----------");

				printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/H2Layers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf ";%s",i > ( PathName & "/hourly_data_TD" & "/H2Layers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/H2Layers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/H2Layers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/H2Layers_" & c & ".csv");

				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/H2Layers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then 
						printf ";%f",(layers_in_out[i, "H2"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_TD" & "/H2Layers_" & c & ".csv");
					else
						printf ";%f",(layers_in_out[i, "H2"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/H2Layers_" & c & ".csv");
						
					}
					for {j in STORAGE_TECH }{
						printf ";%f",(-Storage_in [c, j, "H2", h, td]) > ( PathName & "/hourly_data_TD" & "/H2Layers_" & c & ".csv");
						printf ";%f", (Storage_out [c, j, "H2", h, td]) > ( PathName & "/hourly_data_TD" & "/H2Layers_" & c & ".csv");
					}
					printf ";%f", -End_uses [c, "H2", h, td]  > ( PathName & "/hourly_data_TD" & "/H2Layers_" & c & ".csv");
				}
				
				
				print ("--------------SAVING NGLayer TD " & c & " -----------");

				printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/NGLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf ";%s",i > ( PathName & "/hourly_data_TD" & "/NGLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/NGLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/NGLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/NGLayers_" & c & ".csv");

				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/NGLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then 
						printf ";%f",(layers_in_out[i, "NG"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_TD" & "/NGLayers_" & c & ".csv");
					else
						printf ";%f",(layers_in_out[i, "NG"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/NGLayers_" & c & ".csv");
						
					}
					for {j in STORAGE_TECH }{
						printf ";%f",(-Storage_in [c, j, "NG", h, td]) > ( PathName & "/hourly_data_TD" & "/NGLayers_" & c & ".csv");
						printf ";%f", (Storage_out [c, j, "NG", h, td]) > ( PathName & "/hourly_data_TD" & "/NGLayers_" & c & ".csv");
					}
					printf ";%f", -End_uses [c, "NG", h, td]  > ( PathName & "/hourly_data_TD" & "/NGLayers_" & c & ".csv");
				}
				
				
				print ("--------------SAVING SLFLayer TD " & c & " -----------");

				printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & c & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
					printf ";%s",i > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & c & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & c & ".csv");
					printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & c & ".csv");
				}
				printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & c & ".csv");

				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & c & ".csv");
					for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
					then 
						printf ";%f",(layers_in_out[i, "SLF"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & c & ".csv");
					else
						printf ";%f",(layers_in_out[i, "SLF"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & c & ".csv");
						
					}
					for {j in STORAGE_TECH }{
						printf ";%f",(-Storage_in [c, j, "SLF", h, td]) > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & c & ".csv");
						printf ";%f", (Storage_out [c, j, "SLF", h, td]) > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & c & ".csv");
					}
					printf ";%f", -End_uses [c, "SLF", h, td]  > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & c & ".csv");
				}



				#------------------------------------------
				# Exchanges printing
				#------------------------------------------
				print ("--------- SAVING Exchanges TD " & c & " --------");
				
				printf "Unit;[GW]" > (PathName & "/hourly_data_TD" & "/exch_" & c & ".csv");
				for {i in RESOURCES}{
					for {c2 in COUNTRIES}{
						printf ";%s", i > (PathName & "/hourly_data_TD" & "/exch_" & c & ".csv");
					}
				}
				printf "\n" > (PathName & "/hourly_data_TD" & "/exch_" & c & ".csv");
				printf "Td;Time" > (PathName & "/hourly_data_TD" & "/exch_" & c & ".csv");
				for {i in RESOURCES}{
				for {c2 in COUNTRIES}{
						printf ";%s", c2 > (PathName & "/hourly_data_TD" & "/exch_" & c & ".csv");
				}
				}
				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n%d;%d",td,h   > (PathName & "/hourly_data_TD" & "/exch_" & c & ".csv");
					for {i in RESOURCES}{
						for {c2 in COUNTRIES}{
							printf ";%.6f", (Exch_imp[c, c2, i, h, td]-Exch_exp[c, c2, i, h, td]) > (PathName & "/hourly_data_TD" & "/exch_" & c & ".csv");
						}
					}	
				}

				#------------------------------------------
				# Resources balance
				#------------------------------------------
				print ("--------- SAVING Resources balance TD " & c & " --------");
				
				printf "Unit;[GW]" > (PathName & "/hourly_data_TD" & "/resources_" & c & ".csv");
				for {i in RESOURCES}{
						printf ";%s;%s;%s;%s", i, i, i, i > (PathName & "/hourly_data_TD" & "/resources_" & c & ".csv");
				}
				printf "\n" > (PathName & "/hourly_data_TD" & "/resources_" & c & ".csv");
				printf "Td;Time" > (PathName & "/hourly_data_TD" & "/resources_" & c & ".csv");
				for {i in RESOURCES}{
						printf ";R_t_local;R_t_exterior;R_t_import;R_t_export" > (PathName & "/hourly_data_TD" & "/resources_" & c & ".csv");
				}
				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n%d;%d",td,h   > (PathName & "/hourly_data_TD" & "/resources_" & c & ".csv");
					for {i in RESOURCES}{
						printf ";%.6f;%.6f;%.6f;%.6f", R_t_local[c, i, h, td], R_t_exterior[c, i, h, td], R_t_import[c, i, h, td], R_t_export[c, i, h, td] > (PathName & "/hourly_data_TD" & "/resources_" & c & ".csv");
					}
				}

		
		
			####################################################################################################################################
			
		
			}
			
			###############################################################################                                                    
			#																			  #
			#                     			 OVERALL SYSTEM  							  #                                                    
			#																			  #
			###############################################################################
		


			#########################################
			#				Year summary			#
			#########################################
			
			#------------------------------------------
			## Print cost breakdown to csv file.
			#------------------------------------------
			print "--------------SAVING COST ALL -----------";
			printf "%s;%s;%s;%s\n", "Name","C_inv [M€/y]","C_maint [M€/y]","C_op [M€/y]" > ( PathName & "/cost_breakdown_" & "ALL" & ".csv"); 
			for {i in TECHNOLOGIES union RESOURCES}{if i in TECHNOLOGIES
			then
					printf "%s;%.6f;%.6f;%.6f\n", i, sum{c in COUNTRIES} (tau [c,i] * C_inv [c,i]), sum{c in COUNTRIES} (C_maint [c,i]), 0 > ( PathName & "/cost_breakdown_" & "ALL" & ".csv"); 
			else
					printf "%s;%.6f;%.6f;%.6f\n", i, 0, 0, sum{c in COUNTRIES} (C_op[c,i]) > ( PathName & "/cost_breakdown_" & "ALL" & ".csv"); ;
			}
			printf "%s;%.6f;%.6f;%.6f", "Total [M€/y]", sum{c in COUNTRIES, i in TECHNOLOGIES} (tau [c,i] * C_inv [c,i]), sum{c in COUNTRIES, i in TECHNOLOGIES} C_maint [c,i], sum{c in COUNTRIES, i in RESOURCES} C_op[c,i] > ( PathName & "/cost_breakdown_" & "ALL" & ".csv");
				


			#------------------------------------------
			## Print GWP breakdown
			#------------------------------------------
			print "--------------SAVING GWP ALL -----------";

			printf "%s;%s;%s\n", "Name", "GWP_constr [kt_CO2eq/y]", "GWP_op [kt_CO2eq/y]" > ( PathName & "/gwp_breakdown_" & "ALL" & ".csv");  
			for {i in TECHNOLOGIES union RESOURCES}{if i in TECHNOLOGIES
			then
					printf "%s;%.6f;%.6f\n", i, sum{c in COUNTRIES} (GWP_constr [c,i] / lifetime [c,i]), 0 > ( PathName & "/gwp_breakdown_" & "ALL" & ".csv"); 
			else
					printf "%s;%.6f;%.6f\n", i, 0, sum{c in COUNTRIES} (GWP_op [c,i]) > ( PathName & "/gwp_breakdown_" & "ALL" & ".csv"); 
			}
			printf "%s;%.6f;%.6f", "Total [ktCO2-eq/y]", sum{c in COUNTRIES, i in TECHNOLOGIES} (GWP_constr [c,i] / lifetime [c,i]), sum{c in COUNTRIES, i in RESOURCES} GWP_op [c,i]  > ( PathName & "/gwp_breakdown_" & "ALL" & ".csv"); 

			#------------------------------------------
			## Print losses to csv file
			#------------------------------------------
			print "--------------SAVING losses ALL -----------";

			printf "EUD;Losses [GWh/y]" > ( PathName & "/losses_" & "ALL" & ".csv"); 
			for {i in END_USES_TYPES}{
					printf "\n%s;%.3f", i, sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t] }(Network_losses [c,i,h,td] )  > ( PathName & "/losses_" & "ALL" & ".csv"); 
			}

			#------------------------------------------
			## Print ASSETS to csv file  (/!\ without tau)
			#------------------------------------------
			print "--------------SAVING ASSETS ALL -----------";
			printf "TECHNOLOGIES;c_inv;c_maint;lifetime;f_min;f;f_max;fmin_perc;f_perc;fmax_perc;c_p_actual;c_p;gwp_constr" > ( PathName & "/Assets_" & "ALL" & ".csv"); 
			printf "\nUNITS;[Meuro/GW];[Meuro/GW];[y];[GW or GWh];[GW or GWh];[GW or GWh];[0-1];[0-1];[0-1];[0-1];[0-1];[ktCO2-eq./GW or GWh]" > ( PathName & "/Assets_" & "ALL" & ".csv"); 
			for {i in END_USES_TYPES, tech in TECHNOLOGIES_OF_END_USES_TYPE[i]}{
				printf "\n%s;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f",tech,
						sum{c in COUNTRIES} (C_inv[c,tech]), sum{c in COUNTRIES} (C_maint[c,tech]), sum{c in COUNTRIES}(lifetime[c,tech])/card(COUNTRIES), sum{c in COUNTRIES} (f_min[c,tech]),
						sum{c in COUNTRIES}(F[c,tech]), sum{c in COUNTRIES} (f_max[c,tech]),
						if sum {c2 in COUNTRIES, j2 in TECHNOLOGIES_OF_END_USES_TYPE[i], t2 in PERIODS, h2 in HOUR_OF_PERIOD[t2], td2 in TYPICAL_DAY_OF_PERIOD[t2]} (F_t [c2,j2, h2,td2] ) > 0 then sum {c in COUNTRIES} (fmin_perc[c,tech]*sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [c,tech,h,td]))/ sum {c2 in COUNTRIES, j2 in 
						TECHNOLOGIES_OF_END_USES_TYPE[i], t2 in PERIODS, h2 in HOUR_OF_PERIOD[t2], td2 in TYPICAL_DAY_OF_PERIOD[t2]} (F_t [c2,j2, h2,td2] ) else 0,
						if sum {c2 in COUNTRIES, j2 in TECHNOLOGIES_OF_END_USES_TYPE[i], t2 in PERIODS, h2 in HOUR_OF_PERIOD[t2], td2 in TYPICAL_DAY_OF_PERIOD[t2]} (F_t [c2,j2, h2, td2]) > 0 then sum {c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [c,tech,h,td]) / sum {c2 in COUNTRIES, j2 in
						TECHNOLOGIES_OF_END_USES_TYPE[i], t2 in PERIODS, h2 in HOUR_OF_PERIOD[t2], td2 in TYPICAL_DAY_OF_PERIOD[t2]} (F_t [c2,j2, h2, td2] ) else 0,
						if sum {c2 in COUNTRIES, j2 in TECHNOLOGIES_OF_END_USES_TYPE[i], t2 in PERIODS, h2 in HOUR_OF_PERIOD[t2], td2 in TYPICAL_DAY_OF_PERIOD[t2]} (F_t [c2,j2, h2, td2]) > 0 then sum {c in COUNTRIES} (fmax_perc[c,tech]*sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [c,tech,h,td]))/ sum {c2 in COUNTRIES, j2 in 
						TECHNOLOGIES_OF_END_USES_TYPE[i], t2 in PERIODS, h2 in HOUR_OF_PERIOD[t2], td2 in TYPICAL_DAY_OF_PERIOD[t2]} (F_t [c2,j2, h2, td2]) else 0,
						if (sum{c in COUNTRIES} (F[c,tech]))>0 then sum {c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [c,tech,h,td]) / (sum{c2 in COUNTRIES} (F[c2,tech])*8760) else 0,
						sum{c in COUNTRIES} (c_p[c,tech])/card(COUNTRIES), sum{c in COUNTRIES} (GWP_constr[c,tech]) > ( PathName & "/Assets_" & "ALL" & ".csv"); 
			}
			for {tech in STORAGE_TECH union INFRASTRUCTURE}{
				printf "\n%s;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f",tech,
						sum{c in COUNTRIES} (C_inv[c,tech]), sum{c in COUNTRIES} (C_maint[c,tech]), sum{c in COUNTRIES}(lifetime[c,tech])/card(COUNTRIES), sum{c in COUNTRIES} (f_min[c,tech]), sum{c in COUNTRIES} (F[c,tech]),
						sum{c in COUNTRIES} (f_max[c,tech]), 0, -1, 1, 1, 1, sum{c in COUNTRIES} (GWP_constr[c,tech]) > ( PathName & "/Assets_" & "ALL" & ".csv"); 
			}
			
			
			#------------------------------------------
			# YEARLY BALANCE
			#------------------------------------------
			print "--------- SAVING Yearly balances ALL --------";

			printf "Tech" > ( PathName & "/YearBalance_" & "ALL" & ".csv");
			for {l in LAYERS}{
				printf ";%s",l > ( PathName & "/YearBalance_" & "ALL" & ".csv");
			}
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf "\n%s", i > ( PathName & "/YearBalance_" & "ALL" & ".csv");
				for {l in LAYERS}{if i in TECHNOLOGIES
				then 
					printf ";%f", sum {c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
									layers_in_out[i, l] * F_t [c, i, h, td] > ( PathName & "/YearBalance_" & "ALL" & ".csv");
				else
					printf ";%f", sum {c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
									layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]) > ( PathName & "/YearBalance_" & "ALL" & ".csv");
				}
			}
			for {j in STORAGE_TECH}{
				printf "\n%s", j > ( PathName & "/YearBalance_" & "ALL" & ".csv");
				for {l in LAYERS}{
					printf ";%f", sum {c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
									(Storage_out [c, j, l, h, td] - Storage_in [c, j, l, h, td]) > ( PathName & "/YearBalance_" & "ALL" & ".csv");
				}
			}
			printf "\nEND_USES_DEMAND" > ( PathName & "/YearBalance_" & "ALL" & ".csv");
			for {l in LAYERS}{
				printf ";%f", sum {c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
								End_uses [c, l, h, td] > ( PathName & "/YearBalance_" & "ALL" & ".csv");
			}
			
			
			#------------------------------------------
			# Exchanges losses balance printing
			#------------------------------------------
			print ("--------- SAVING Exchanges losses balance ALL --------");
			
			printf "RESOURCES" > (PathName & "/exch_losses.csv");
			for{c in COUNTRIES}{
				printf ";%s", c > (PathName & "/exch_losses.csv");
			}
			for {i in RESOURCES}{
				printf "\n%s", i > (PathName & "/exch_losses.csv");
				for {c in COUNTRIES}{
					printf ";%.6f", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
								(R_t_export [c, i, h, td]*exchange_losses[i]) > (PathName & "/exch_losses.csv");
				}
			}
			
			#------------------------------------------
			# Exchanges balance recap printing
			#------------------------------------------
			print ("--------- SAVING Exchanges balance recap ALL --------");
			
			printf "RESOURCES;REGION" > (PathName & "/exch_ALL.csv");
			for{c in COUNTRIES}{
				printf ";%s", c > (PathName & "/exch_ALL.csv");
			}
			for {i in RESOURCES}{
				for {c in COUNTRIES}{
					printf "\n%s;%s", i, c > (PathName & "/exch_ALL.csv");
					for {c2 in COUNTRIES}{
						printf ";%.6f", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
								(Exch_imp[c,c2,i,h,td] - Exch_exp[c,c2,i,h,td]) > (PathName & "/exch_ALL.csv");
					}
				}
			}
			
			
			#------------------------------------------
			# Resources balance
			#------------------------------------------
			print ("--------- SAVING Resources balance ALL --------");
			
			printf "RESOURCES" > (PathName & "/resources_ALL.csv");
			printf ";R_t_local;R_t_exterior" > (PathName & "/resources_ALL.csv");
			for {i in RESOURCES}{
				printf "\n%s;%.6f;%.6f", i, sum {c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} R_t_local[c, i, h, td],
				sum {c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} R_t_exterior[c, i, h, td] > (PathName & "/resources_ALL.csv");
			}
			

			#########################################
			#			YEAR HOURLY DATA			#
			#########################################
			
			#------------------------------------------
			#    STORAGE distribution CURVES
			#------------------------------------------
			print "--------------SAVING elec Storage YEAR ALL -----------";
			# storage curves
			printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & "ALL" & ".csv");
			for {i in STORAGE_TECH diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
				printf ";%s", i > ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & "ALL" & ".csv");
			}
			for {i in STORAGE_TECH diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
				printf ";%s_in" ,{l in LAYERS: storage_eff_in  [i,l] > 0} i > ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & "ALL" & ".csv");
				printf ";%s_out",{l in LAYERS: storage_eff_out [i,l] > 0} i > ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & "ALL" & ".csv");
			}
			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td  > ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & "ALL" & ".csv");
				for {i in STORAGE_TECH diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
					printf ";%f", sum{c in COUNTRIES} (Storage_level[c, i, t]) > ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & "ALL" & ".csv");
				}
				for {i in STORAGE_TECH diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] diff STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
					printf ";%f", (sum {c in COUNTRIES, l in LAYERS: storage_eff_in [i,l] > 0}
									-(Storage_in [c, i, l, h, td] * storage_eff_in [i, l]))
							> ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & "ALL" & ".csv");
					printf ";%f", (sum {c in COUNTRIES, l in LAYERS: storage_eff_in [i,l] > 0}
									(Storage_out [c,i, l, h, td] / storage_eff_out [i, l]))
							> ( PathName & "/hourly_data_year" & "/Distri_E_stored_" & "ALL" & ".csv");
					
				}
			}

			print "--------------SAVING TS Storage YEAR ALL -----------";

			# storage curves
			printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/Distri_TS_" & "ALL" & ".csv");
			for {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] union STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
				printf ";%s", i > ( PathName & "/hourly_data_year" & "/Distri_TS_" & "ALL" & ".csv");
			}
			for {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] union STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
				printf ";%s_in" ,{l in LAYERS: storage_eff_in  [i,l] > 0} i > ( PathName & "/hourly_data_year" & "/Distri_TS_" & "ALL" & ".csv");
				printf ";%s_out",{l in LAYERS: storage_eff_out [i,l] > 0} i > ( PathName & "/hourly_data_year" & "/Distri_TS_" & "ALL" & ".csv");
			}
			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td  > ( PathName & "/hourly_data_year" & "/Distri_TS_" & "ALL" & ".csv");
				for {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] union STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
					printf ";%f", sum{c in COUNTRIES} (Storage_level[c, i, t]) > ( PathName & "/hourly_data_year" & "/Distri_TS_" & "ALL" & ".csv");
				}
				for {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] union STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}{
					printf ";%f", (sum {c in COUNTRIES, l in LAYERS: storage_eff_in [i,l] > 0}
									-(Storage_in [c, i, l, h, td] * storage_eff_in [i, l]))
							> ( PathName & "/hourly_data_year" & "/Distri_TS_" & "ALL" & ".csv");
					printf ";%f", (sum {c in COUNTRIES, l in LAYERS: storage_eff_in [i,l] > 0}
									(Storage_out [c, i, l, h, td] / storage_eff_out [i, l]))
							> ( PathName & "/hourly_data_year" & "/Distri_TS_" & "ALL" & ".csv");
					
				}
			}

			#------------------------------------------
			# LAYERS FLUXES
			#------------------------------------------
			print "--------------SAVING Elec Layer YEAR ALL -----------";

			printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/ElecLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
				printf ";%s",i > ( PathName & "/hourly_data_year" & "/ElecLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/ElecLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/ElecLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_year" & "/ElecLayers_" & "ALL" & ".csv");

			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/ElecLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then
						printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "ELECTRICITY"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_year" & "/ElecLayers_" & "ALL" & ".csv");
				else
						printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "ELECTRICITY"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_year" & "/ElecLayers_" & "ALL" & ".csv");
				}
				for {j in STORAGE_TECH}{
					printf ";%f", sum{c in COUNTRIES} (-Storage_in [c, j, "ELECTRICITY", h, td]) > ( PathName & "/hourly_data_year" & "/ElecLayers_" & "ALL" & ".csv");
					printf ";%f", sum{c in COUNTRIES} (Storage_out [c, j, "ELECTRICITY", h, td]) > ( PathName & "/hourly_data_year" & "/ElecLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum{c in COUNTRIES} (-End_uses [c, "ELECTRICITY", h, td])  > ( PathName & "/hourly_data_year" & "/ElecLayers_" & "ALL" & ".csv");
			}

			print "--------------SAVING LT Layer YEAR ALL -----------";

			printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/LTLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
				printf ";%s",i > ( PathName & "/hourly_data_year" & "/LTLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/LTLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/LTLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_year" & "/LTLayers_" & "ALL" & ".csv");

			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/LTLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{if i in TECHNOLOGIES
				then 
					printf ";%f",(sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (layers_in_out[i, l] * F_t [c, i, h, td])) > ( PathName & "/hourly_data_year" & "/LTLayers_" & "ALL" & ".csv");
				else
					printf ";%f",(sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]))) > ( PathName & "/hourly_data_year" & "/LTLayers_" & "ALL" & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%f",sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]}(-Storage_in [c, j, l, h, td]) > ( PathName & "/hourly_data_year" & "/LTLayers_" & "ALL" & ".csv");
					printf ";%f",sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (Storage_out [c, j, l, h, td]) > ( PathName & "/hourly_data_year" & "/LTLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (-End_uses [c, l, h, td])  > ( PathName & "/hourly_data_year" & "/LTLayers_" & "ALL" & ".csv");
			}

			print "--------------SAVING HT Layer YEAR ALL -----------";

			printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/HTLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
				printf ";%s",i > ( PathName & "/hourly_data_year" & "/HTLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/HTLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/HTLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_year" & "/HTLayers_" & "ALL" & ".csv");

			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/HTLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{if i in TECHNOLOGIES
				then 
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "HEAT_HIGH_T"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_year" & "/HTLayers_" & "ALL" & ".csv");
				else
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "HEAT_HIGH_T"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_year" & "/HTLayers_" & "ALL" & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%f", sum{c in COUNTRIES} (-Storage_in [c, j, "HEAT_HIGH_T", h, td]) > ( PathName & "/hourly_data_year" & "/HTLayers_" & "ALL" & ".csv");
					printf ";%f", sum{c in COUNTRIES} (Storage_out [c, j, "HEAT_HIGH_T", h, td]) > ( PathName & "/hourly_data_year" & "/HTLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum{c in COUNTRIES} (-End_uses [c, "HEAT_HIGH_T", h, td])  > ( PathName & "/hourly_data_year" & "/HTLayers_" & "ALL" & ".csv");
			}

			print "--------------SAVING PASSANGER Layer YEAR ALL -----------";

			printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf ";%s",i > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & "ALL" & ".csv");

			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then 
					printf ";%f",(sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (layers_in_out[i, l] * F_t [c, i, h, td])) > 
			( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & "ALL" & ".csv");
				else
						printf ";%f",(sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]))) > 
				( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & "ALL" & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%f",sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]}(-Storage_in [c, j, l, h, td]) > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & "ALL" & ".csv");
					printf ";%f",sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]}(-Storage_out[c, j, l, h, td]) > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (-End_uses [c, l, h, td] ) > ( PathName & "/hourly_data_year" & "/PASSANGERSLayers_" & "ALL" & ".csv");
			}

			
			
			print "--------------SAVING FREIGHT Layer YEAR ALL -----------";

			printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf ";%s",i > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & "ALL" & ".csv");

			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then 
					printf ";%f",(sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (layers_in_out[i, l] * F_t [c, i, h, td])) > 
			( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & "ALL" & ".csv");
			else
					printf ";%f",(sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]))) > 
			( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & "ALL" & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%f",sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]}(-Storage_in [c, j, l, h, td]) > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & "ALL" & ".csv");
					printf ";%f",sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]}(-Storage_out[c, j, l, h, td]) > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (-End_uses [c, l, h, td] )  > ( PathName & "/hourly_data_year" & "/FREIGHTLayers_" & "ALL" & ".csv");
			}
			
			
			print "--------------SAVING Cooling Layer YEAR ALL -----------";

			printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
				printf ";%s",i > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & "ALL" & ".csv");

			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then
						printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "SPACE_COOLING"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & "ALL" & ".csv");
				else
						printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "SPACE_COOLING"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & "ALL" & ".csv");
				}
				for {j in STORAGE_TECH}{
					printf ";%f", sum{c in COUNTRIES} (-Storage_in [c, j, "SPACE_COOLING", h, td]) > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & "ALL" & ".csv");
					printf ";%f", sum{c in COUNTRIES} (Storage_out [c, j, "SPACE_COOLING", h, td]) > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum{c in COUNTRIES} (-End_uses [c, "SPACE_COOLING", h, td])  > ( PathName & "/hourly_data_year" & "/CoolingLayers_" & "ALL" & ".csv");
			}



			print "--------------SAVING H2Layer YEAR ALL -----------";

			printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/H2Layers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf ";%s",i > ( PathName & "/hourly_data_year" & "/H2Layers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/H2Layers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/H2Layers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_year" & "/H2Layers_" & "ALL" & ".csv");

			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/H2Layers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then 
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "H2"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_year" & "/H2Layers_" & "ALL" & ".csv");
				else
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "H2"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_year" & "/H2Layers_" & "ALL" & ".csv");
					
				}
				for {j in STORAGE_TECH }{
					printf ";%f", sum{c in COUNTRIES} (-Storage_in [c, j, "H2", h, td]) > ( PathName & "/hourly_data_year" & "/H2Layers_" & "ALL" & ".csv");
					printf ";%f", sum{c in COUNTRIES} (Storage_out [c, j, "H2", h, td]) > ( PathName & "/hourly_data_year" & "/H2Layers_" & "ALL" & ".csv");
				}
				printf ";%f", sum{c in COUNTRIES} (-End_uses [c, "H2", h, td])  > ( PathName & "/hourly_data_year" & "/H2Layers_" & "ALL" & ".csv");
			}

						
			print "--------------SAVING NGLayer YEAR ALL -----------";

			printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/NGLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf ";%s",i > ( PathName & "/hourly_data_year" & "/NGLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/NGLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/NGLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_year" & "/NGLayers_" & "ALL" & ".csv");

			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/NGLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then 
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "NG"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_year" & "/NGLayers_" & "ALL" & ".csv");
				else
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "NG"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_year" & "/NGLayers_" & "ALL" & ".csv");
					
				}
				for {j in STORAGE_TECH }{
					printf ";%f", sum{c in COUNTRIES} (-Storage_in [c, j, "NG", h, td]) > ( PathName & "/hourly_data_year" & "/NGLayers_" & "ALL" & ".csv");
					printf ";%f", sum{c in COUNTRIES} (Storage_out [c, j, "NG", h, td]) > ( PathName & "/hourly_data_year" & "/NGLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum{c in COUNTRIES} (-End_uses [c, "NG", h, td])  > ( PathName & "/hourly_data_year" & "/NGLayers_" & "ALL" & ".csv");
			}
			
			
			print "--------------SAVING SLFLayer YEAR ALL -----------";

			printf "Period;HourofPeriod;TD" > ( PathName & "/hourly_data_year" & "/SLFLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf ";%s",i > ( PathName & "/hourly_data_year" & "/SLFLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_year" & "/SLFLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_year" & "/SLFLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_year" & "/SLFLayers_" & "ALL" & ".csv");

			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td   > ( PathName & "/hourly_data_year" & "/SLFLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then 
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "SLF"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_year" & "/SLFLayers_" & "ALL" & ".csv");
				else
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "SLF"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_year" & "/SLFLayers_" & "ALL" & ".csv");
					
				}
				for {j in STORAGE_TECH }{
					printf ";%f", sum{c in COUNTRIES} (-Storage_in [c, j, "SLF", h, td]) > ( PathName & "/hourly_data_year" & "/SLFLayers_" & "ALL" & ".csv");
					printf ";%f", sum{c in COUNTRIES} (Storage_out [c, j, "SLF", h, td]) > ( PathName & "/hourly_data_year" & "/SLFLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum{c in COUNTRIES} (-End_uses [c, "SLF", h, td])  > ( PathName & "/hourly_data_year" & "/SLFLayers_" & "ALL" & ".csv");
			}
			
			#------------------------------------------
			# Exchanges losses printing
			#------------------------------------------
			print "--------- SAVING Exchanges Losses YEAR ALL --------";
				
			printf "Period;HourofPeriod;TD" > (PathName & "/hourly_data_year" & "/exch_losses.csv");
			for {i in RESOURCES}{
				for {c in COUNTRIES}{
					printf ";%s", i > (PathName & "/hourly_data_year" & "/exch_losses.csv");
				}
			}
			printf "\n" > (PathName & "/hourly_data_year" & "/exch_losses.csv");
			printf "(Unit : [GW]);;" > (PathName & "/hourly_data_year" & "/exch_losses.csv");
			for {i in RESOURCES}{
				for {c in COUNTRIES}{
						printf ";%s", c > (PathName & "/hourly_data_year" & "/exch_losses.csv");
				}
			}
			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td   > (PathName & "/hourly_data_year" & "/exch_losses.csv");
				for {i in RESOURCES}{
					for {c in COUNTRIES}{
						printf ";%.6f",(R_t_export[c, i, h, td]*exchange_losses[i]) > (PathName & "/hourly_data_year" & "/exch_losses.csv");
					}
				}	
			}
			
			
			
			
			#------------------------------------------
			# Resources balance
			#------------------------------------------
			print ("--------- SAVING Resources balance YEAR ALL --------");
			
			printf "Period;HourofPeriod;TD" > (PathName & "/hourly_data_year" & "/resources_ALL.csv");
			for {i in RESOURCES}{
					printf ";%s;%s", i, i > (PathName & "/hourly_data_year" & "/resources_ALL.csv");
			}
			printf "\n" > (PathName & "/hourly_data_year" & "/resources_ALL.csv");
			printf "(Unit : [GW]);;" > (PathName & "/hourly_data_year" & "/resources_ALL.csv");
			for {i in RESOURCES}{
					printf ";R_t_local;R_t_exterior" > (PathName & "/hourly_data_year" & "/resources_ALL.csv");
			}
			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n%d;%d;%d",t,h,td   > (PathName & "/hourly_data_year" & "/resources_ALL.csv");
				for {i in RESOURCES}{
					printf ";%.6f;%.6f", sum{c in COUNTRIES} R_t_local[c, i, h, td], sum{c in COUNTRIES} R_t_exterior[c, i, h, td] > (PathName & "/hourly_data_year" & "/resources_ALL.csv");
				}
			}
			
			
			

			
			
			
				
			
			#########################################
			#			TD HOURLY DATA				#
			#########################################
			
			# not printing storage as we need t in PERIODS for storage level
			

			#------------------------------------------
			# LAYERS FLUXES
			#------------------------------------------
			print "--------------SAVING Elec Layer TD ALL -----------";

			printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
				printf ";%s",i > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & "ALL" & ".csv");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then
						printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "ELECTRICITY"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & "ALL" & ".csv");
				else
						printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "ELECTRICITY"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & "ALL" & ".csv");
				}
				for {j in STORAGE_TECH}{
					printf ";%f", sum{c in COUNTRIES} (-Storage_in [c, j, "ELECTRICITY", h, td]) > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & "ALL" & ".csv");
					printf ";%f", sum{c in COUNTRIES} (Storage_out [c, j, "ELECTRICITY", h, td]) > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum{c in COUNTRIES} (-End_uses [c, "ELECTRICITY", h, td])  > ( PathName & "/hourly_data_TD" & "/ElecLayers_" & "ALL" & ".csv");
			}

			print "--------------SAVING LT Layer TD ALL -----------";

			printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/LTLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
				printf ";%s",i > ( PathName & "/hourly_data_TD" & "/LTLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/LTLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/LTLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/LTLayers_" & "ALL" & ".csv");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/LTLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{if i in TECHNOLOGIES
				then 
					printf ";%f",(sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (layers_in_out[i, l] * F_t [c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/LTLayers_" & "ALL" & ".csv");
				else
					printf ";%f",(sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]))) > ( PathName & "/hourly_data_TD" & "/LTLayers_" & "ALL" & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%f",sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]}(-Storage_in [c, j, l, h, td]) > ( PathName & "/hourly_data_TD" & "/LTLayers_" & "ALL" & ".csv");
					printf ";%f",sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (Storage_out [c, j, l, h, td]) > ( PathName & "/hourly_data_TD" & "/LTLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["HEAT_LOW_T"]} (-End_uses [c, l, h, td])  > ( PathName & "/hourly_data_TD" & "/LTLayers_" & "ALL" & ".csv");
			}

			print "--------------SAVING HT Layer TD ALL -----------";

			printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/HTLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
				printf ";%s",i > ( PathName & "/hourly_data_TD" & "/HTLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/HTLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/HTLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/HTLayers_" & "ALL" & ".csv");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/HTLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{if i in TECHNOLOGIES
				then 
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "HEAT_HIGH_T"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_TD" & "/HTLayers_" & "ALL" & ".csv");
				else
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "HEAT_HIGH_T"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/HTLayers_" & "ALL" & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%f", sum{c in COUNTRIES} (-Storage_in [c, j, "HEAT_HIGH_T", h, td]) > ( PathName & "/hourly_data_TD" & "/HTLayers_" & "ALL" & ".csv");
					printf ";%f", sum{c in COUNTRIES} (Storage_out [c, j, "HEAT_HIGH_T", h, td]) > ( PathName & "/hourly_data_TD" & "/HTLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum{c in COUNTRIES} (-End_uses [c, "HEAT_HIGH_T", h, td])  > ( PathName & "/hourly_data_TD" & "/HTLayers_" & "ALL" & ".csv");
			}

			print "--------------SAVING PASSANGER Layer TD ALL -----------";

			printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf ";%s",i > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & "ALL" & ".csv");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then 
					printf ";%f",(sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (layers_in_out[i, l] * F_t [c, i, h, td])) > 
			( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & "ALL" & ".csv");
				else
						printf ";%f",(sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]))) > 
				( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & "ALL" & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%f",sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]}(-Storage_in [c, j, l, h, td]) > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & "ALL" & ".csv");
					printf ";%f",sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]}(-Storage_out[c, j, l, h, td]) > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_PASSENGER"]} (-End_uses [c, l, h, td] ) > ( PathName & "/hourly_data_TD" & "/PASSANGERSLayers_" & "ALL" & ".csv");
			}

			
			
			print "--------------SAVING FREIGHT Layer TD ALL -----------";

			printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf ";%s",i > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & "ALL" & ".csv");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then 
					printf ";%f",(sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (layers_in_out[i, l] * F_t [c, i, h, td])) > 
			( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & "ALL" & ".csv");
			else
					printf ";%f",(sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (layers_in_out[i, l] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td]))) > 
			( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & "ALL" & ".csv");
				}
				for {j in STORAGE_TECH }{
					printf ";%f",sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]}(-Storage_in [c, j, l, h, td]) > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & "ALL" & ".csv");
					printf ";%f",sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]}(-Storage_out[c, j, l, h, td]) > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum {c in COUNTRIES, l in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"]} (-End_uses [c, l, h, td] )  > ( PathName & "/hourly_data_TD" & "/FREIGHTLayers_" & "ALL" & ".csv");
			}
			
			
			print "--------------SAVING Cooling Layer TD ALL -----------";

			printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
				printf ";%s",i > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & "ALL" & ".csv");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then
						printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "SPACE_COOLING"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & "ALL" & ".csv");
				else
						printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "SPACE_COOLING"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & "ALL" & ".csv");
				}
				for {j in STORAGE_TECH}{
					printf ";%f", sum{c in COUNTRIES} (-Storage_in [c, j, "SPACE_COOLING", h, td]) > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & "ALL" & ".csv");
					printf ";%f", sum{c in COUNTRIES} (Storage_out [c, j, "SPACE_COOLING", h, td]) > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum{c in COUNTRIES} (-End_uses [c, "SPACE_COOLING", h, td])  > ( PathName & "/hourly_data_TD" & "/CoolingLayers_" & "ALL" & ".csv");
			}


			print "--------------SAVING H2Layer TD ALL -----------";

			printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/H2Layers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf ";%s",i > ( PathName & "/hourly_data_TD" & "/H2Layers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/H2Layers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/H2Layers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/H2Layers_" & "ALL" & ".csv");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/H2Layers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then 
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "H2"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_TD" & "/H2Layers_" & "ALL" & ".csv");
				else
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "H2"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/H2Layers_" & "ALL" & ".csv");
					
				}
				for {j in STORAGE_TECH }{
					printf ";%f", sum{c in COUNTRIES} (-Storage_in [c, j, "H2", h, td]) > ( PathName & "/hourly_data_TD" & "/H2Layers_" & "ALL" & ".csv");
					printf ";%f", sum{c in COUNTRIES} (Storage_out [c, j, "H2", h, td]) > ( PathName & "/hourly_data_TD" & "/H2Layers_" & "ALL" & ".csv");
				}
				printf ";%f", sum{c in COUNTRIES} (-End_uses [c, "H2", h, td])  > ( PathName & "/hourly_data_TD" & "/H2Layers_" & "ALL" & ".csv");
			}

			

			print "--------------SAVING NGLayer TD ALL -----------";

			printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/NGLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf ";%s",i > ( PathName & "/hourly_data_TD" & "/NGLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/NGLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/NGLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/NGLayers_" & "ALL" & ".csv");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/NGLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then 
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "NG"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_TD" & "/NGLayers_" & "ALL" & ".csv");
				else
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "NG"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/NGLayers_" & "ALL" & ".csv");
					
				}
				for {j in STORAGE_TECH }{
					printf ";%f", sum{c in COUNTRIES} (-Storage_in [c, j, "NG", h, td]) > ( PathName & "/hourly_data_TD" & "/NGLayers_" & "ALL" & ".csv");
					printf ";%f", sum{c in COUNTRIES} (Storage_out [c, j, "NG", h, td]) > ( PathName & "/hourly_data_TD" & "/NGLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum{c in COUNTRIES} (-End_uses [c, "NG", h, td])  > ( PathName & "/hourly_data_TD" & "/NGLayers_" & "ALL" & ".csv");
			}
			
			
			
			print "--------------SAVING SLFLayer TD ALL -----------";

			printf "Td;Time" > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & "ALL" & ".csv");
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf ";%s",i > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & "ALL" & ".csv");
			}
			for {j in STORAGE_TECH }{
				printf ";%s_Pin",j > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & "ALL" & ".csv");
				printf ";%s_Pout",j > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & "ALL" & ".csv");
			}
			printf ";END_USE" > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & "ALL" & ".csv");

			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n%d;%d",td,h   > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & "ALL" & ".csv");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{if i in TECHNOLOGIES
				then 
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "SLF"] * F_t [c, i, h, td]) > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & "ALL" & ".csv");
				else
					printf ";%f", sum{c in COUNTRIES} (layers_in_out[i, "SLF"] * (R_t_local[c, i, h, td] + R_t_import[c, i, h, td] - (1 + exchange_losses[i]) * R_t_export[c, i, h, td] + R_t_exterior[c, i, h, td])) > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & "ALL" & ".csv");
					
				}
				for {j in STORAGE_TECH }{
					printf ";%f", sum{c in COUNTRIES} (-Storage_in [c, j, "SLF", h, td]) > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & "ALL" & ".csv");
					printf ";%f", sum{c in COUNTRIES} (Storage_out [c, j, "SLF", h, td]) > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & "ALL" & ".csv");
				}
				printf ";%f", sum{c in COUNTRIES} (-End_uses [c, "SLF", h, td])  > ( PathName & "/hourly_data_TD" & "/SLFLayers_" & "ALL" & ".csv");
			}
			
			#------------------------------------------
			# Exchanges losses printing
			#------------------------------------------
			print "--------- SAVING Exchanges Losses TD ALL --------";
			
			printf "Unit;[GW]" > (PathName & "/hourly_data_TD" & "/exch_losses.csv");
			for {i in RESOURCES}{
				for {c in COUNTRIES}{
					printf ";%s", i > (PathName & "/hourly_data_TD" & "/exch_losses.csv");
				}
			}
			printf "\n" > (PathName & "/hourly_data_TD" & "/exch_losses.csv");
			printf "Td;Time" > (PathName & "/hourly_data_TD" & "/exch_losses.csv");
			for {i in RESOURCES}{
				for {c in COUNTRIES}{
						printf ";%s", c > (PathName & "/hourly_data_TD" & "/exch_losses.csv");
				}
			}
			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n%d;%d",td,h   > (PathName & "/hourly_data_TD" & "/exch_losses.csv");
				for {i in RESOURCES}{
					for {c in COUNTRIES}{
						printf ";%.6f",(R_t_export[c, i, h, td]*exchange_losses[i]) > (PathName & "/hourly_data_TD" & "/exch_losses.csv");
					}
				}	
			}
			
			
			
			
			#------------------------------------------
			# Resources balance
			#------------------------------------------
			print ("--------- SAVING Resources balance TD ALL --------");
			
			printf "Unit;[GW]" > (PathName & "/hourly_data_TD" & "/resources_ALL.csv");
			for {i in RESOURCES}{
					printf ";%s;%s", i, i > (PathName & "/hourly_data_TD" & "/resources_ALL.csv");
			}
			printf "\n" > (PathName & "/hourly_data_TD" & "/resources_ALL.csv");
			printf "Td;Time" > (PathName & "/hourly_data_TD" & "/resources_ALL.csv");
			for {i in RESOURCES}{
					printf ";R_t_local;R_t_exterior" > (PathName & "/hourly_data_TD" & "/resources_ALL.csv");
			}
			for {td in TYPICAL_DAYS, h in HOURS}{
				printf "\n%d;%d",td,h   > (PathName & "/hourly_data_TD" & "/resources_ALL.csv");
				for {i in RESOURCES}{
					printf ";%.6f;%.6f", sum{c in COUNTRIES} R_t_local[c, i, h, td], sum{c in COUNTRIES} R_t_exterior[c, i, h, td] > (PathName & "/hourly_data_TD" & "/resources_ALL.csv");
				}
			}
		
			
			
			#------------------------------------------
			# Curtailement
			#------------------------------------------		
			
			printf "Country" > (PathName & "/Curt" & ".csv");
			for {c in COUNTRIES}{
			printf ";%s", c > ( PathName & "/Curt" & ".csv"); }
			
			for {c in COUNTRIES}{
			printf "\nCurtailment;%.2f",Curt[c] > ( PathName & "/Curt" & ".csv");
			}

			###############################################################################                                                    
			#																			  #
			#                     			  SHARE										  #                                                    
			#																			  #
			###############################################################################
			
			#first table
			printf "Country;Share_heat_dhn;Share_mobility_public;Share_freight_train;Share_freight_road;Share_freight_boat\n" > ( PathName & "/Share" & ".csv"); 
			for {c in COUNTRIES}{
			printf "%s;%.2f;%.2f;%.2f;%.2f;%.2f\n", c, Share_heat_dhn[c], Share_mobility_public[c], Share_freight_train[c], Share_freight_road[c], Share_freight_boat[c] > ( PathName & "/Share" & ".csv");
			}
			
			# second table
			printf "Country" > ( PathName & "/Share" & ".csv");
			for {i in TECHNOLOGIES_OF_END_USES_CATEGORY["MOBILITY_PASSENGER"]}{
				printf ";%s",i > ( PathName & "/Share" & ".csv");
			}
			for {i in TECHNOLOGIES_OF_END_USES_CATEGORY["MOBILITY_FREIGHT"]}{
				printf ";%s",i > ( PathName & "/Share" & ".csv");
			}
			for {i in TECHNOLOGIES_OF_END_USES_TYPE["HEAT_LOW_T_DECEN"] diff {"DEC_SOLAR"}}{
				printf ";%s",i > ( PathName & "/Share" & ".csv");
			}
			
			for {c in COUNTRIES}{
				printf "\n%s",c > ( PathName & "/Share" & ".csv");
				
				for {i in TECHNOLOGIES_OF_END_USES_CATEGORY["MOBILITY_PASSENGER"]}{
					printf ";%.4f", Shares_mobility_passenger[c,i] > ( PathName & "/Share" & ".csv");
				}
				
				for {i in TECHNOLOGIES_OF_END_USES_CATEGORY["MOBILITY_FREIGHT"]}{
					printf ";%.4f", Shares_mobility_freight[c,i] > ( PathName & "/Share" & ".csv");
				}
				
				for {i in TECHNOLOGIES_OF_END_USES_TYPE["HEAT_LOW_T_DECEN"] diff {"DEC_SOLAR"}}{
					printf "%;.4f", Shares_lowT_dec[c,i] > ( PathName & "/Share" & ".csv");
				}
			
			
			}




			################################################################################
			################################################################################                                                    
			##																			  ##
			##                     			    SANKEY 	     							  ##                                                    
			##																			  ##
			################################################################################
			################################################################################
			
			
			
				###############################################################################                                                    
			#																			  #
			#                            OVERALL SYSTEM'S SANKEY            			  #                                                    
			#																			  #
			###############################################################################
		
			print "--------- SAVING SANKEY --------";

			## Generate CSV file to be used as input to Sankey diagram
			# Notes:
			# - Assuming that SNG and BioOil are used in boilers
			printf "%s,%s,%s,%s,%s,%s\n", "source" , "target", "realValue", "layerID", "layerColor", "layerUnit" > ( PathName & "/input2sankey.csv");
			
			#------------------------------------------
			# SANKEY - RESOURCES
			#------------------------------------------
			## Gasoline
			#All Gasoline is going to private mobility sector
			
			# Gasoline --> Mob Priv
			#if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
			#	(R_t_exterior [c,"GASOLINE", h, td]+R_t_local [c,"GASOLINE", h, td]  ) > 10 then
			#	printf "%s,%s,%.2f,%s,%s,%s\n", "Gasoline" , "Mob priv", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
			#			(layers_in_out["GASOLINE","GASOLINE"] * (R_t_exterior [c,"GASOLINE", h, td] + R_t_local [c,"GASOLINE", h, td]) ) / 1000 , "Gasoline", "#808080", "TWh" > ( PathName & "/input2sankey.csv");
			
			
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"CAR_PHEV", h, td] + F_t [c,"CAR_HEV", h, td]) ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Gasoline" , "Mob priv", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_PHEV","GASOLINE"] * F_t [c,"CAR_PHEV", h, td]   - 
			layers_in_out["CAR_HEV","GASOLINE"] * F_t [c,"CAR_HEV", h, td]  ) / 1000 , "Gasoline", "#808080", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			
			
			
			## Diesel
			
			#Diesel-->Mob Priv
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"CAR_DIESEL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Mob priv", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_DIESEL","DIESEL"] * F_t [c,"CAR_DIESEL", h, td]  ) / 1000 , "Diesel", 
			"#D3D3D3", "TWh" > ( PathName & "/input2sankey.csv");
			#Diesel-->Mob Pub
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t [c,"BUS_COACH_DIESEL", h, td] + 
			F_t[c,"BUS_COACH_HYDIESEL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Mob public", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BUS_COACH_DIESEL","DIESEL"] * F_t [c,"BUS_COACH_DIESEL", h, td]   - 
			layers_in_out["BUS_COACH_HYDIESEL","DIESEL"] * F_t [c,"BUS_COACH_HYDIESEL", h, td]   ) / 1000 , "Diesel", "#D3D3D3", "TWh" 
			> ( PathName & "/input2sankey.csv");
			#Diesel-->Freight
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t [c,"TRUCK_DIESEL", h, td]+F_t [c,"BOAT_FREIGHT_DIESEL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Freight", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRUCK_DIESEL","DIESEL"] * F_t [c,"TRUCK_DIESEL", h, td] -layers_in_out["BOAT_FREIGHT_DIESEL","DIESEL"] * F_t [c,"BOAT_FREIGHT_DIESEL", h, td]  ) / 1000 , "Diesel", "#D3D3D3", "TWh" 
			> ( PathName & "/input2sankey.csv");

			
			## Bioethanol and Biodiesel
			#Bioethanol --> Gasoline 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_exterior [c,"BIOETHANOL", h, td] + R_t_local [c,"BIOETHANOL", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Bioethanol" , "Gasoline", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]} (layers_in_out["BIOETHANOL","GASOLINE"] * R_t_exterior [c,"BIOETHANOL", h, td] + layers_in_out["BIOETHANOL","GASOLINE"] * R_t_local [c,"BIOETHANOL", h, td] ) / 1000 ,  "Gasoline", "#808080", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			#Biodiesel --> Diesel 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_exterior [c,"BIODIESEL", h, td] + R_t_local [c,"BIODIESEL", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Biodiesel" , "Diesel", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]} (layers_in_out["BIODIESEL","DIESEL"] * R_t_exterior [c,"BIODIESEL", h, td] + layers_in_out["BIODIESEL","DIESEL"] * R_t_local [c,"BIODIESEL", h, td] ) / 1000 , "Diesel", "#D3D3D3", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			
			## Natural Gas
			
			#NG Fossil extracted  --> NG
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_exterior [c,"NG", h, td] + R_t_local [c,"NG", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "NG Fossil" , "NG", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["NG","NG"] * R_t_exterior [c,"NG", h, td] + layers_in_out["NG","NG"] * R_t_local [c,"NG", h, td] ) / 1000 , "NG", "#FFD700", "TWh" 
			> ( PathName & "/input2sankey.csv");
			
			
			#SNG  --> NG
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_exterior [c,"SNG", h, td] + R_t_local [c,"SNG", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "SNG imports" , "NG", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["SNG","NG"] * R_t_exterior [c,"SNG", h, td] + layers_in_out["SNG","NG"] * R_t_local [c,"SNG", h, td] ) / 1000 , "NG", "#FFD700", "TWh" 
			> ( PathName & "/input2sankey.csv");
			
			#NG --> Freight
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t [c,"TRUCK_NG", h, td] + F_t [c,"BOAT_FREIGHT_NG", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Freight", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRUCK_NG","NG"] * F_t [c,"TRUCK_NG", h, td] -layers_in_out["BOAT_FREIGHT_NG","NG"] * F_t [c,"BOAT_FREIGHT_NG", h, td] ) / 1000 , "NG", "#FFD700", "TWh" 
			> ( PathName & "/input2sankey.csv");
			#NG --> Mob Priv
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"CAR_NG", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Mob priv", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_NG","NG"] * F_t [c,"CAR_NG", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" > 
			( PathName & "/input2sankey.csv");
			#NG --> Mob Pub
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"BUS_COACH_CNG_STOICH", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Mob public", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BUS_COACH_CNG_STOICH","NG"] * F_t [c,"BUS_COACH_CNG_STOICH", h, td]  ) / 1000 , 
			"NG", "#FFD700", "TWh" > ( PathName & "/input2sankey.csv");
			#NG --> H2
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"H2_NG", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "H2", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["H2_NG","NG"] * F_t [c,"H2_NG", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			
			#NG --> SLF
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"METHANE_TO_METHANOL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "SLF", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["METHANE_TO_METHANOL","NG"] * F_t [c,"METHANE_TO_METHANOL", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" > 
			( PathName & "/input2sankey.csv");
			
		
			#NG --> CCGT
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"CCGT", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "CCGT", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CCGT","NG"] * F_t [c,"CCGT", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			#CCGT --> Elec
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"CCGT", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CCGT" , "Elec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["CCGT","ELECTRICITY"] * F_t [c,"CCGT", h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			#NG --> CHP
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_COGEN_GAS", h, td] + F_t [c,"DHN_COGEN_GAS", h, 
			td] + F_t [c,"DEC_COGEN_GAS", h, td] + F_t [c,"DEC_ADVCOGEN_GAS", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "CHP", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_COGEN_GAS","NG"] * F_t [c,"IND_COGEN_GAS", h, td]   - 
			layers_in_out["DHN_COGEN_GAS","NG"] * F_t [c,"DHN_COGEN_GAS", h, td]   - layers_in_out["DEC_COGEN_GAS","NG"] * F_t 
			[c,"DEC_COGEN_GAS", h, td]   - layers_in_out["DEC_ADVCOGEN_GAS","NG"] * F_t [c,"DEC_ADVCOGEN_GAS", h, td]  ) / 
			1000 , "NG", "#FFD700", "TWh" > ( PathName & "/input2sankey.csv");
			#NG --> HP
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DEC_THHP_GAS", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "HPs", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DEC_THHP_GAS","NG"] * F_t [c,"DEC_THHP_GAS", h, td]  ) / 1000 , "NG", "#FFD700", 
			"TWh" > ( PathName & "/input2sankey.csv");
			#NG --> Boilers 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_BOILER_GAS", h, td] + F_t [c,"DHN_BOILER_GAS", 
			h, td] + F_t [c,"DEC_BOILER_GAS", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Boilers", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_BOILER_GAS","NG"] * F_t [c,"IND_BOILER_GAS", h, td]   - 
			layers_in_out["DHN_BOILER_GAS","NG"] * F_t [c,"DHN_BOILER_GAS", h, td]   - layers_in_out["DEC_BOILER_GAS","NG"] * F_t 
			[c,"DEC_BOILER_GAS", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" > ( PathName & "/input2sankey.csv");
			#NG --> Non-Energy
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"NON_ENERGY_NG", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Non-Energy", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["NON_ENERGY_NG","NG"] * F_t [c,"NON_ENERGY_NG", h, td]  ) / 1000 , "NG", 
			"#FFD700", "TWh" > ( PathName & "/input2sankey.csv");
			
			## Electricity production
			
			#Elec import from outside system
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(R_t_exterior [c,"ELECTRICITY", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Electricity" , "Elec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["ELECTRICITY","ELECTRICITY"] * R_t_exterior [c,"ELECTRICITY", h, td]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
			#Uranium --> Elec
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"NUCLEAR", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Nuclear" , "Elec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["NUCLEAR","ELECTRICITY"] * F_t [c,"NUCLEAR", h, td]  ) / 1000 , "Nuclear", 
			"#FFC0CB", "TWh" > ( PathName & "/input2sankey.csv");
			#WindOn --> Elec
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F[c,"WIND_ONSHORE"]*c_p_t["WIND_ONSHORE",c,h,td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wind Onshore" , "Elec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["WIND_ONSHORE","ELECTRICITY"] * F[c,"WIND_ONSHORE"]*c_p_t["WIND_ONSHORE",c,h,td]  ) / 1000 , "Wind Onshore", "#27AE34", "TWh" 
			> ( PathName & "/input2sankey.csv");
			#WindOff --> Elec
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F[c,"WIND_OFFSHORE"]*c_p_t["WIND_OFFSHORE",c,h,td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wind Offshore" , "Elec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["WIND_OFFSHORE","ELECTRICITY"] * F[c,"WIND_OFFSHORE"]*c_p_t["WIND_OFFSHORE",c,h,td]  ) / 1000 , "Wind Offshore", "#27AE34", "TWh" 
			> ( PathName & "/input2sankey.csv");
			#HydroDam --> Elec
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"HYDRO_DAM", h, td] )  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Hydro Dams" , "Elec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["HYDRO_DAM","ELECTRICITY"] * F_t [c,"HYDRO_DAM", h, td]  ) / 1000 , "Hydro Dam", "#00CED1", "TWh" > 
			( PathName & "/input2sankey.csv");
			#HydroRiver --> Elec
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"HYDRO_RIVER", h, td] )  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Hydro River" , "Elec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["HYDRO_RIVER","ELECTRICITY"] * F_t [c,"HYDRO_RIVER", h, td]   ) / 1000 , "Hydro River", "#0000FF", 
			"TWh" > ( PathName & "/input2sankey.csv");
			
			#Coal --> Elec
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"COAL_US", h, td] + F_t [c,"COAL_IGCC", h, td]) ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Coal" , "Elec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["COAL_US","COAL"] * F_t [c,"COAL_US", h, td]   - layers_in_out["COAL_IGCC","COAL"] 
			* F_t [c,"COAL_IGCC", h, td]  ) / 1000 , "Coal", "#A0522D", "TWh" > ( PathName & "/input2sankey.csv");
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"IND_BOILER_COAL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Coal" , "Boilers", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_BOILER_COAL","COAL"] * F_t [c,"IND_BOILER_COAL", h, td]  ) / 1000 , "Coal", 
			"#A0522D", "TWh" > ( PathName & "/input2sankey.csv");
			
			# Solar --> Elec
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F [c,"PV"] *c_p_t["PV",c,h,td] + F [c,"U_PV"] *c_p_t["U_PV",c,h,td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar PV" , "Elec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["PV","ELECTRICITY"] * F [c,"PV"] *c_p_t["PV",c,h,td] + layers_in_out["U_PV","ELECTRICITY"] * F [c,"U_PV"] *c_p_t["U_PV",c,h,td]  ) / 1000 , "Solar", "#FFFF00", "TWh" > 
			( PathName & "/input2sankey.csv");
			# Solar --> Heat LT Dec 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DEC_SOLAR", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Heat LT Dec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(layers_in_out["DEC_SOLAR","HEAT_LOW_T_DECEN"] * (F_t [c,"DEC_SOLAR", h, td])# SUPPRESSED # - Solar_excess [ h, td] ) 
					-((max(Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] )))
					)/ 1000
					, "Solar", "#FFFF00", "TWh" > ( PathName & "/input2sankey.csv");
			# Solar --> Dec Sto.
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DEC_SOLAR", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Dec. Sto", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					((max(Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] ))
					)/ 1000
					, "Solar", "#FFFF00", "TWh" > ( PathName & "/input2sankey.csv");
			
			#Solar --> DHN
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DHN_SOLAR", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "DHN", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["DHN_SOLAR","HEAT_LOW_T_DHN"] * F [c,"DHN_SOLAR"] * c_p_t["DHN_SOLAR",c,h,td]  ) / 1000 , "Solar", "#FFFF00", "TWh" > #From F_t -> F <=> taking into account curtailment
			(PathName & "/input2sankey.csv");
			
			
			# Geothermal --> Elec
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"GEOTHERMAL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Geothermal" , "Elec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["GEOTHERMAL","ELECTRICITY"] * F_t [c,"GEOTHERMAL", h, td]  ) / 1000 , "Geothermal", 
			"#FF0000", "TWh" > ( PathName & "/input2sankey.csv");
			# Geothermal --> DHN
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DHN_DEEP_GEO", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Geothermal" , "DHN", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["DHN_DEEP_GEO","HEAT_LOW_T_DHN"] * F_t [c,"DHN_DEEP_GEO", h, td]  ) / 1000 , 
			"Geothermal", "#FF0000", "TWh" > ( PathName & "/input2sankey.csv");
			
			# Waste --> CHP
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_COGEN_WASTE", h, td] + F_t 
			[c,"DHN_COGEN_WASTE", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Waste" , "CHP", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_COGEN_WASTE","WASTE"] * F_t [c,"IND_COGEN_WASTE", h, td]   
			-layers_in_out["DHN_COGEN_WASTE","WASTE"] * F_t [c,"DHN_COGEN_WASTE", h, td]  ) / 1000 , "Waste", "#808000", "TWh" > 
			( PathName & "/input2sankey.csv");
			# Waste --> Boilers	
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"IND_BOILER_WASTE", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Waste" , "Boilers", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_BOILER_WASTE","WASTE"] * F_t [c,"IND_BOILER_WASTE", h, td]  ) / 1000 , 
			"Waste", "#808000", "TWh" > ( PathName & "/input2sankey.csv");
			
			#Wet biomass --> CHP
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DHN_COGEN_WET_BIOMASS", h, td]) + (F_t [c,"DHN_COGEN_BIO_HYDROLYSIS", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wet Biomass" , "CHP", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DHN_COGEN_WET_BIOMASS","WET_BIOMASS"] * F_t [c,"DHN_COGEN_WET_BIOMASS", h, td] -layers_in_out["DHN_COGEN_BIO_HYDROLYSIS","WET_BIOMASS"] * F_t [c,"DHN_COGEN_BIO_HYDROLYSIS", h, td]  ) / 1000 , "Wet Biomass", "#336600", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			#Wet biomass --> SNG
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"BIOMETHANATION", h, td] + F_t [c,"BIO_HYDROLYSIS", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Wet Biomass" , "NG", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BIOMETHANATION","WET_BIOMASS"] * F_t [c,"BIOMETHANATION", h, td] -layers_in_out["BIO_HYDROLYSIS","WET_BIOMASS"] * F_t [c,"BIO_HYDROLYSIS", h, td]   ) / 1000 , "Wet Biomass", "#336600", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			
			# Oil --> CHP
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DEC_COGEN_OIL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "CHP", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DEC_COGEN_OIL","LFO"] * F_t [c,"DEC_COGEN_OIL", h, td]  ) / 1000 , "Oil", 
			"#8B008B", "TWh" > ( PathName & "/input2sankey.csv");
			# Oil --> Boilers 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_BOILER_OIL", h, td] + F_t [c,"DHN_BOILER_OIL", 
			h, td] + F_t [c,"DEC_BOILER_OIL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "Boilers", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_BOILER_OIL","LFO"] * F_t [c,"IND_BOILER_OIL", h, td]   - 
			layers_in_out["DHN_BOILER_OIL","LFO"] * F_t [c,"DHN_BOILER_OIL", h, td]   - layers_in_out["DEC_BOILER_OIL","LFO"] * 
			F_t [c,"DEC_BOILER_OIL", h, td]  ) / 1000 , "Oil", "#8B008B", "TWh" > ( PathName & "/input2sankey.csv");
			#Oil --> Non-Energy
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"NON_ENERGY_OIL", h, td]  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "Non-Energy", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["NON_ENERGY_OIL","LFO"] * F_t [c,"NON_ENERGY_OIL", h, td]  ) / 1000 , "Oil", 
			"#8B008B", "TWh" > ( PathName & "/input2sankey.csv");
			
			
			# Wood --> H2
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"H2_BIOMASS", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "H2", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["H2_BIOMASS","WOOD"] * F_t [c,"H2_BIOMASS", h, td]  ) / 1000 , "Wood", "#CD853F", 
			"TWh" > ( PathName & "/input2sankey.csv");
			# Wood --> SNG
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"GASIFICATION_SNG", h, td] )  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "NG", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["GASIFICATION_SNG","WOOD"] * F_t [c,"GASIFICATION_SNG", h, td]) / 1000 , "Wood", "#CD853F", "TWh" > 
			( PathName & "/input2sankey.csv");
			# Wood --> SLF
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"PYROLYSIS", h, 
			td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "SLF", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}( -layers_in_out["PYROLYSIS","WOOD"] * F_t [c,"PYROLYSIS", h, td]  ) / 1000 , "Wood", "#CD853F", "TWh" > 
			( PathName & "/input2sankey.csv");			
			
			
			
			# Wood --> CHP
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_COGEN_WOOD", h, td] + F_t [c,"DHN_COGEN_WOOD", 
			h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "CHP", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_COGEN_WOOD","WOOD"] * F_t [c,"IND_COGEN_WOOD", h, td]   - 
			layers_in_out["DHN_COGEN_WOOD","WOOD"] * F_t [c,"DHN_COGEN_WOOD", h, td]  ) / 1000 , "Wood", "#CD853F", "TWh" > 
			( PathName & "/input2sankey.csv");
			# Wood --> Boilers 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_BOILER_WOOD", h, td] + F_t 
			[c,"DHN_BOILER_WOOD", h, td] + F_t [c,"DEC_BOILER_WOOD", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "Boilers", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_BOILER_WOOD","WOOD"] * F_t [c,"IND_BOILER_WOOD", h, td]   - 
			layers_in_out["DHN_BOILER_WOOD","WOOD"] * F_t [c,"DHN_BOILER_WOOD", h, td]   - layers_in_out["DEC_BOILER_WOOD","WOOD"] * 
			F_t [c,"DEC_BOILER_WOOD", h, td]  ) / 1000 , "Wood", "#CD853F", "TWh" > ( PathName & "/input2sankey.csv");
			
			
			#------------------------------------------
			# SANKEY - Electricity use
			#------------------------------------------
			#Elec --> Mob Priv 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"CAR_PHEV", h, td] + F_t [c,"CAR_BEV", h, td]) ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Mob priv", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_PHEV","ELECTRICITY"] * F_t [c,"CAR_PHEV", h, td]   - 
			layers_in_out["CAR_BEV","ELECTRICITY"] * F_t [c,"CAR_BEV", h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey.csv");
			#Elec --> Mob Pub 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"TRAIN_PUB", h, td] + F_t [c,"TRAMWAY_TROLLEY", h, 
			td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Mob public", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRAIN_PUB","ELECTRICITY"] * F_t [c,"TRAIN_PUB", h, td]   - 
			layers_in_out["TRAMWAY_TROLLEY","ELECTRICITY"] * F_t [c,"TRAMWAY_TROLLEY", h, td]  ) / 1000 , "Electricity", "#00BFFF", 
			"TWh" > ( PathName & "/input2sankey.csv");
			#Elec --> Freight 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"TRAIN_FREIGHT", h, td] + F_t [c,"TRUCK_ELEC", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Freight", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRAIN_FREIGHT","ELECTRICITY"] * F_t [c,"TRAIN_FREIGHT", h, td] -layers_in_out["TRUCK_ELEC","ELECTRICITY"] * F_t [c,"TRUCK_ELEC", h, td]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
			#Elec --> Loss
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses [c,"ELECTRICITY", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Loss", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses 
			[c,"ELECTRICITY", h, td]    ) / 1000 
			, "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
			#Elec --> Elec Demand 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses [c,"ELECTRICITY", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Elec demand", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((End_uses 
			[c,"ELECTRICITY", h, td]  - Network_losses [c,"ELECTRICITY", h, td] - sum {i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"]} (Storage_out[c, i, "ELECTRICITY", h, td]))   
			)/ 1000 , "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
				
			#Elec --> SLF	
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"SYN_METHANOLATION", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "SLF", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SYN_METHANOLATION","ELECTRICITY"] * F_t [c,"SYN_METHANOLATION", h, td]   ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
			
			#Elec --> SNG	
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"SYN_METHANOLATION", h, td]+F_t [c,"SYN_METHANATION", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "NG", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SYN_METHANATION","ELECTRICITY"] * F_t [c,"SYN_METHANATION", h, td]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");		
			
			
			#New boxes for Space Cooling and Process Cooling	
			
			#Elec --> Cold 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"BIG_SPLIT", h, td]   ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Cold", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BIG_SPLIT","ELECTRICITY"] * F_t [c,"BIG_SPLIT", h, td] ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
			
			#Elec --> Chiller
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"CHILLER_WC",h,td]  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Chiller", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CHILLER_WC","ELECTRICITY"] * F_t [c,"CHILLER_WC", h, td] ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");		
				
				
			# Elec --> Storage 
			if sum{c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "ELECTRICITY", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Storage", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}       (sum {i 
			in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] }(Storage_in[c, i, "ELECTRICITY", h, td]             
			)                                                                                         )/ 1000 , "Electricity", "#00BFFF", 
			"TWh" > ( PathName & "/input2sankey.csv");
			# Storage --> Elec Demand 
			if sum{c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "ELECTRICITY", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Storage" , "Elec demand", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(sum {i 
			in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] }                                                        (Storage_out[c, i, "ELECTRICITY", h, td] / storage_eff_out [i, 
			"ELECTRICITY"])  )/ 1000 , "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
			#Storage --> Loss
			if sum{c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "ELECTRICITY", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Storage" , "Loss", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (sum {i 
			in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] }((Storage_in[c, i, "ELECTRICITY", h, td])- (Storage_out[c, i, "ELECTRICITY", h, td] / storage_eff_out [i, 
			"ELECTRICITY"]))  )/ 1000 , "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");

			#Elec --> HP 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DHN_HP_ELEC", h, td] + F_t [c,"DEC_HP_ELEC", h, 
			td]) ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "HPs", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DHN_HP_ELEC","ELECTRICITY"] * F_t [c,"DHN_HP_ELEC", h, td]   - 
			layers_in_out["DEC_HP_ELEC","ELECTRICITY"] * F_t [c,"DEC_HP_ELEC", h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey.csv");
			#Elec --> H2 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"H2_ELECTROLYSIS", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "H2", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["H2_ELECTROLYSIS","ELECTRICITY"] * F_t [c,"H2_ELECTROLYSIS", h, td]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
			#Elec --> Heat LT Dec 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DEC_DIRECT_ELEC", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Heat LT Dec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["DEC_DIRECT_ELEC","HEAT_LOW_T_DECEN"] * F_t [c,"DEC_DIRECT_ELEC", h, td]  
					- ((max(Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] )))) / 1000 
			, "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
			#Elec --> Dec Sto. 
			if sum {c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]: Storage_in[c,"TS_DEC_DIRECT_ELEC", "HEAT_LOW_T_DECEN", h, td] > Storage_out[c,"TS_DEC_DIRECT_ELEC", "HEAT_LOW_T_DECEN", h, td] } 
			    	((Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td])*(1-F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] ))) >10 then
						printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Dec. Sto", 		 
							sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
							((max(Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] ))) / 1000 
						, "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");		
			#Elec --> HT Heat 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"IND_DIRECT_ELEC", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Heat HT", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["IND_DIRECT_ELEC","HEAT_HIGH_T"] * F_t [c,"IND_DIRECT_ELEC", h, td]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey.csv");
			
			
			## H2 imports
			#H2 imports  --> H2
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_exterior [c,"H2", h, td] + R_t_local [c,"H2", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "H2 imports" , "H2", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["H2","H2"] * R_t_exterior [c,"H2", h, td] + layers_in_out["H2","H2"] * R_t_local [c,"H2", h, td] ) / 1000 , "H2", 
			"#FF00FF", "TWh" > ( PathName & "/input2sankey.csv");
			
			
			
			## H2 use
			
			#H2 --> Freight
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"TRUCK_FUEL_CELL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Freight", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRUCK_FUEL_CELL","H2"] * F_t [c,"TRUCK_FUEL_CELL", h, td]  ) / 1000 , "H2", 
			"#FF00FF", "TWh" > ( PathName & "/input2sankey.csv");
			#H2 --> CHP 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DEC_ADVCOGEN_H2", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "CHP", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DEC_ADVCOGEN_H2","H2"] * F_t [c,"DEC_ADVCOGEN_H2", h, td]  ) / 1000 , "H2", 
			"#FF00FF", "TWh" > ( PathName & "/input2sankey.csv");
			#H2 --> Mob Priv
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"CAR_FUEL_CELL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Mob priv", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_FUEL_CELL","H2"] * F_t [c,"CAR_FUEL_CELL", h, td]  ) / 1000 , "H2", 
			"#FF00FF", "TWh" > ( PathName & "/input2sankey.csv");
			#H2 --> Mob Pub 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"BUS_COACH_FC_HYBRIDH2", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Mob public", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BUS_COACH_FC_HYBRIDH2","H2"] * F_t [c,"BUS_COACH_FC_HYBRIDH2", h, td]  ) / 1000 , 
			"H2", "#FF00FF", "TWh" > ( PathName & "/input2sankey.csv");
			
			#H2 --> SNG
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"SYN_METHANATION", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "NG", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SYN_METHANATION","H2"] * F_t [c,"SYN_METHANATION", h, td]   ) / 1000 , "H2", "#FF00FF", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			#H2 --> SLF
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"SYN_METHANOLATION", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "SLF", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SYN_METHANOLATION","H2"] * F_t [c,"SYN_METHANOLATION", h, td]  ) / 1000 , "H2", "#FF00FF", "TWh" > 
			( PathName & "/input2sankey.csv");			
			#
			
			#------------------------------------------
			# SANKEY - HEATING
			#------------------------------------------
			
			## CHP
			#CHP --> Elec 
			if sum{c in COUNTRIES, i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [ c, i, h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Elec", sum{c in COUNTRIES, i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"ELECTRICITY"] * F_t [c, i, h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey.csv");
			#CHP --> Heat LT Dec 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DEC_COGEN_GAS", h, td] + F_t [c,"DEC_COGEN_OIL", h, 
			td] + F_t [c,"DEC_ADVCOGEN_GAS", h, td] + F_t [c,"DEC_ADVCOGEN_H2", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Heat LT Dec", 
					sum{c in COUNTRIES, i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
						(layers_in_out[i,"HEAT_LOW_T_DECEN"] * F_t [c, i, h, td]  
						 -((max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
							(max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
							(max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
							(max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] )))
						) / 1000 
						, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			#CHP --> Dec. Sto 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
								    ((max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] )))> 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Dec. Sto", 
					sum{c in COUNTRIES, i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
						((max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
							(max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
							(max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
							(max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] ))
						) / 1000 
						, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			#CHP --> DHN 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DHN_COGEN_GAS", h, td] + F_t [c,"DHN_COGEN_WOOD", 
			h, td] + F_t [c,"DHN_COGEN_WASTE", h, td] + F_t [c,"DHN_COGEN_WET_BIOMASS", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "DHN", sum{c in COUNTRIES, i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"HEAT_LOW_T_DHN"] * F_t [c, i, h, td]  ) / 1000 , "Heat LT", "#FA8072", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			#CHP --> Heat HT 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_COGEN_GAS", h, td] + F_t [c,"IND_COGEN_WOOD", 
			h, td] + F_t [c,"IND_COGEN_WASTE", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Heat HT", sum{c in COUNTRIES, i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"HEAT_HIGH_T"] * F_t [c, i, h, td]  ) / 1000 , "Heat HT", "#DC143C", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			# HP --> Heat LT Dec. 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DEC_HP_ELEC", h, td] + F_t [c,"DEC_THHP_GAS", h, 
			td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "Heat LT Dec", 
					sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					((layers_in_out["DEC_HP_ELEC","HEAT_LOW_T_DECEN"] * F_t [c,"DEC_HP_ELEC", h, td]   +
					layers_in_out["DEC_THHP_GAS","HEAT_LOW_T_DECEN"] * F_t [c,"DEC_THHP_GAS", h, td]  
					-((max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
			     	  (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] )))
					) / 1000 ) 
					, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			#HP --> DHN 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DHN_HP_ELEC", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "DHN", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}((layers_in_out["DHN_HP_ELEC","HEAT_LOW_T_DHN"] * F_t [c,"DHN_HP_ELEC", h, td]  ) / 1000  - ( 
			(Storage_in [c,"TS_DEC_HP_ELEC", "ELECTRICITY", h, td]) )/ 1000), "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			# HP --> Dec Sto.
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
			    		((max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
			     	    (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] ))) >10 then
						printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "Dec. Sto", 		 
							sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
							((max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
							 (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] )))/1000
							,"Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");	
			
			
			
			
			## Biofuels
			
			#SLF --> Elec 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"PYROLYSIS", h, 
			td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "SLF" , "Elec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}( layers_in_out["PYROLYSIS","ELECTRICITY"] * F_t [c,"PYROLYSIS", h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			#SNG --> Elec 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"GASIFICATION_SNG", h, td] + F_t [c,"BIO_HYDROLYSIS", h, td] )  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Elec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["GASIFICATION_SNG","ELECTRICITY"] * F_t [c,"GASIFICATION_SNG", h, td] + layers_in_out["BIO_HYDROLYSIS","ELECTRICITY"] * F_t [c,"BIO_HYDROLYSIS", h, td]    ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey.csv");			
			
			
			
			#SNG --> DHN 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"GASIFICATION_SNG", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "DHN", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["GASIFICATION_SNG","HEAT_LOW_T_DHN"] * F_t [c,"GASIFICATION_SNG", h, td]  ) / 1000, 
			"Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			
			# Boilers--> Heat LT Dec 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DEC_BOILER_GAS", h, td] + F_t [c,"DEC_BOILER_WOOD", 
			h, td] + F_t [c,"DEC_BOILER_OIL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Heat LT Dec", 
							sum{c in COUNTRIES, i in BOILERS, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
							   (layers_in_out[i,"HEAT_LOW_T_DECEN"] * F_t [c, i, h, td]  
							    -((max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
								  (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
								  (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] )))
									 ) / 1000 ,
						"Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
						
			#Boilers --> Dec. Sto. 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
								    ((max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] ))) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Dec. Sto", 
								sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
								    ((max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] ))
								 ) / 1000 ,
						"Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			
			#Boilers --> DHN 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DHN_BOILER_GAS", h, td] + F_t [c,"DHN_BOILER_WOOD", 
			h, td] + F_t [c,"DHN_BOILER_OIL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "DHN", sum{c in COUNTRIES, i in BOILERS, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"HEAT_LOW_T_DHN"] * F_t [c, i, h, td]  ) / 1000 , "Heat LT", "#FA8072", "TWh" > 
			( PathName & "/input2sankey.csv");
			#Boilers --> Heat HT
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_BOILER_GAS", h, td] + F_t [c,"IND_BOILER_WOOD", 
			h, td] + F_t [c,"IND_BOILER_OIL", h, td] + F_t [c,"IND_BOILER_COAL", h, td] + F_t [c,"IND_BOILER_WASTE", h, td])  ) > 10 
			then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Heat HT", sum{c in COUNTRIES, i in BOILERS, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"HEAT_HIGH_T"] * F_t [c, i, h, td]  ) / 1000 , "Heat HT", "#DC143C", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			#Dec Sto. --> Heat LT Dec 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t], i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]: Storage_in[c, i, "HEAT_LOW_T_DECEN", h, td] < Storage_out[c, i, "HEAT_LOW_T_DECEN", h, td] } 
									(Storage_out[c, i , "HEAT_LOW_T_DECEN", h, td] - Storage_in[c, i , "HEAT_LOW_T_DECEN", h, td]) > 10 then
			   printf "%s,%s,%.2f,%s,%s,%s\n", "Dec. Sto" , "Heat LT Dec", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t], i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]: Storage_in[c, i, "HEAT_LOW_T_DECEN", h, td] < Storage_out[c, i, "HEAT_LOW_T_DECEN", h, td] } 
									(Storage_out[c, i , "HEAT_LOW_T_DECEN", h, td] - Storage_in[c, i , "HEAT_LOW_T_DECEN", h, td])/1000 , "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			
			# DHN --> Heat LT DHN 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses[c,"HEAT_LOW_T_DHN", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "Heat LT DHN", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
				(sum {i in TECHNOLOGIES diff STORAGE_TECH } (layers_in_out[i, "HEAT_LOW_T_DHN"] * F_t [c, i, h, td]  ) 
				- Network_losses [c,"HEAT_LOW_T_DHN", h, td]   
				- sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"]} (Storage_in  [c, i, "HEAT_LOW_T_DHN", h, td])) / 1000
				, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
				
			#DHN --> DHN Loss 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses [c,"HEAT_LOW_T_DHN", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "Loss DHN", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses 
			[c, "HEAT_LOW_T_DHN", h, td]  ) / 1000 , "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			
			
			# DHN --> DHN storage :
			# Sto in  : sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Storage_in  [i, "HEAT_LOW_T_DHN", h, td])
			# Sto out : sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Storage_out[c, i, "HEAT_LOW_T_DHN", h, td])
			
			if sum {c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in  [c, i, "HEAT_LOW_T_DHN", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "DHN Sto", sum {c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Storage_in  [c, i, "HEAT_LOW_T_DHN", h, td])/1000
				, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			#DHN Sto. --> Heat LT DHN 
			if sum {c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_out  [c, i, "HEAT_LOW_T_DHN", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN Sto" , "Heat LT DHN", sum {c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Storage_out  [c, i, "HEAT_LOW_T_DHN", h, td])/1000
				, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey.csv");
			
			
			
			
			#Biofuels --> NG
			#
			#if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"GASIFICATION_SNG", h, td]+F_t [c,"BIOMETHANATION", h, td]+F_t [c,"SYN_METHANATION", h, td])  ) > 10 then
			#	printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "NG", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			#TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["GASIFICATION_SNG","NG"] * F_t [c,"GASIFICATION_SNG", h, td] + layers_in_out["BIOMETHANATION","NG"] * F_t [c,"BIOMETHANATION", h, td] + layers_in_out["SYN_METHANATION","NG"] * F_t [c,"SYN_METHANATION", h, td] ) / 1000 , "NG", "#FFD700", "TWh" > 
			#( PathName & "/input2sankey.csv");
			
			#Biofuels --> SLF
			#if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"PYROLYSIS", h, td]+F_t [c,"SYN_METHANOLATION", h, td])  ) > 10 then
			#printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "SLF", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			#TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["PYROLYSIS","SLF"] * F_t [c,"PYROLYSIS", h, td] +layers_in_out["SYN_METHANOLATION","SLF"] * F_t [c,"SYN_METHANOLATION", h, td]   ) / 1000 , "SLF", "#FFD700", "TWh" > 
			#( PathName & "/input2sankey.csv");		
			
			
			#SLF imports  --> SLF
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_exterior [c,"SLF", h, td] + R_t_local [c,"SLF", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "SLF imports" , "SLF", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["SLF","SLF"] * R_t_exterior [c,"SLF", h, td] + layers_in_out["SLF","SLF"] * R_t_local [c,"SLF", h, td] ) / 1000 ,  "SLF", "#8C028C", "TWh" 
			> ( PathName & "/input2sankey.csv");
			
			
			#SLF --> Diesel 
				if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"SLF_TO_DIESEL", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "SLF" , "Diesel", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SLF_TO_DIESEL","SLF"] * F_t [c,"SLF_TO_DIESEL", h, td]   ) / 1000 , "SLF", "#8C028C", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			#SLF --> Gasoline
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"SLF_TO_GASOLINE", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "SLF" , "Gasoline", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SLF_TO_GASOLINE","SLF"] * F_t [c,"SLF_TO_GASOLINE", h, td]   ) / 1000 , "SLF", "#8C028C", "TWh" > 
			( PathName & "/input2sankey.csv");   
			
			#SLF --> LFO
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"SLF_TO_LFO", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "SLF" , "Oil", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SLF_TO_LFO","SLF"] * F_t [c,"SLF_TO_LFO", h, td]   ) / 1000 , "SLF", "#8C028C", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			
			# Heat HT --> HT Storage 
			if sum{c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "HEAT_HIGH_T", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Heat HT" , "HT Storage", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}       (sum {i 
			in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"] }(Storage_in[c, i, "HEAT_HIGH_T", h, td] ))/ 1000 , "Heat HT", "#DC143C", 
			"TWh" > ( PathName & "/input2sankey.csv");
			
			#HT Storage --> Ind Heat Demand  
			if sum{c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "HEAT_HIGH_T", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "HT Storage" , "Ind Heat Demand", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(sum {i 
			in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"] }  (Storage_out[c, i, "HEAT_HIGH_T", h, td]  )  )/ 1000 , "Heat HT", "#DC143C", "TWh" > ( PathName & "/input2sankey.csv");
			
			#HT Storage --> Loss
			#if sum{c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "HEAT_HIGH_T", h, td]) > 10 then
			#	printf "%s,%s,%.2f,%s,%s,%s\n", "HT Storage" , "Loss", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (sum {i 
			#in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"] }((Storage_in[c, i, "HEAT_HIGH_T", h, td])- (Storage_out[c, i, "HEAT_HIGH_T", h, td] / storage_eff_out [i, 
			#"HEAT_HIGH_T"]))  )/ 1000 , "Heat HT", "#DC143C", "TWh" > ( PathName & "/input2sankey.csv");

			#Heat HT --> Ind Heat Demand 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses [c,"HEAT_HIGH_T", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Heat HT" , "Ind Heat Demand", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((End_uses 
			[c,"HEAT_HIGH_T", h, td] - sum {i in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"]} (Storage_out[c, i, "HEAT_HIGH_T", h, td]))   
			)/ 1000 , "Heat HT", "#DC143C", "TWh" > ( PathName & "/input2sankey.csv");
			
			
			# Cold --> Cold Storage 
			if sum{c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "SPACE_COOLING", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Cold" , "Cold Storage", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}       (sum {i 
			in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"] }(Storage_in[c, i, "SPACE_COOLING", h, td]             
			)                                                                                         )/ 1000 , "Cold", "#00CED1", 
			"TWh" > ( PathName & "/input2sankey.csv");
			
			# Cold Storage --> Space Cooling
			if sum{c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_out[c, i, "SPACE_COOLING", h, td]) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Cold Storage" , "Space Cooling", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(sum {i 
			in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"] } (Storage_out[c, i, "SPACE_COOLING", h, td]  )  )/ 1000 , "Cold", "#00CED1", "TWh" > ( PathName & "/input2sankey.csv");
			
			# Cold Storage --> Loss
			#if sum{c in COUNTRIES, i in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "SPACE_COOLING", h, td]) > 10 then
			#	printf "%s,%s,%.2f,%s,%s,%s\n", "Cold Storage" , "Cold Loss", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (sum {i 
			#in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"] }((Storage_in[c, i, "SPACE_COOLING", h, td])- (Storage_out[c, i, "SPACE_COOLING", h, td] / storage_eff_out [i, 
			#"SPACE_COOLING"]))  )/ 1000 , "Cold", "#00CED1", "TWh" > ( PathName & "/input2sankey.csv");

			#Cold  --> Space Cooling 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses [c,"SPACE_COOLING", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Cold" , "Space Cooling", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((End_uses 
			[c,"SPACE_COOLING", h, td] - sum {i in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"]} (Storage_out[c, i, "SPACE_COOLING", h, td]) ))  / 1000 , "Cold", "#00CED1", "TWh" > ( PathName & "/input2sankey.csv");
		
			#Chiller  --> Process Cooling 
			if sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses [c,"PROCESS_COOLING", h, td]  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Chiller" , "Process Cooling", sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(( End_uses 
			[c,"PROCESS_COOLING", h, td]))  / 1000 , "Cold", "#00CED1", "TWh" > ( PathName & "/input2sankey.csv");
		
		
		
			#Elec --> Curt
			if sum{c in COUNTRIES} (Curt [c])  > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Curt", sum{c in COUNTRIES} (Curt [c]) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey.csv");
			
			#Elec --> Interconnection
			
			#Interconnection --> 
			
			
			#STORAGE DECENTRALISED :
			# inputs : 
			#     -Direct elec : sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
			#						((max(Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] )))
			#     -HPs         : sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}         
			#						((max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] )))
			#     -Boilers     : sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
			#					    ((max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] )))
			#	  -CHP_dec     : sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
			#					    ((max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] )))
			#     -DEC_SOLAR   : sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
			#						((max(Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] ))+
			#						 (max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] )))
			# outputs :
			# 	  -Storage_out     : sum{c in COUNTRIES, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t], i in TS_DEC} 
			#						(max{0,Storage_out[c, i , "HEAT_LOW_T_DECEN", h, td] - Storage_in[c, i , "HEAT_LOW_T_DECEN", h, td]})



			
			###############################################################################                                                    
			#																			  #
			#                            LOCAL SYSTEMS' SANKEYS             			  #                                                    
			#																			  #
			###############################################################################

			for {c in COUNTRIES}{
			print "--------- SAVING SANKEY --------";

			## Generate CSV file to be used as input to Sankey diagram
			# Notes:
			# - Assuming that SNG and BioOil are used in boilers
			printf "%s,%s,%s,%s,%s,%s\n", "source" , "target", "realValue", "layerID", "layerColor", "layerUnit" > ( PathName & "/input2sankey" & c & ".csv");
			
			#------------------------------------------
			# SANKEY - RESOURCES
			#------------------------------------------
			## Gasoline
			#All Gasoline is going to private mobility sector
			
			# Gasoline --> Mob Priv
			#if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
			#	(R_t_exterior [c,"GASOLINE", h, td]+R_t_local [c,"GASOLINE", h, td]  ) > 10 then
			#	printf "%s,%s,%.2f,%s,%s,%s\n", "Gasoline" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
			#			(layers_in_out["GASOLINE","GASOLINE"] * (R_t_exterior [c,"GASOLINE", h, td] + R_t_local [c,"GASOLINE", h, td]) ) / 1000 , "Gasoline", "#808080", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"CAR_PHEV", h, td] + F_t [c,"CAR_HEV", h, td]) ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Gasoline" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_PHEV","GASOLINE"] * F_t [c,"CAR_PHEV", h, td]   - 
			layers_in_out["CAR_HEV","GASOLINE"] * F_t [c,"CAR_HEV", h, td]  ) / 1000 , "Gasoline", "#808080", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			
			
			
			## Diesel
			
			#Diesel-->Mob Priv
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"CAR_DIESEL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_DIESEL","DIESEL"] * F_t [c,"CAR_DIESEL", h, td]  ) / 1000 , "Diesel", 
			"#D3D3D3", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#Diesel-->Mob Pub
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t [c,"BUS_COACH_DIESEL", h, td] + 
			F_t[c,"BUS_COACH_HYDIESEL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Mob public", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BUS_COACH_DIESEL","DIESEL"] * F_t [c,"BUS_COACH_DIESEL", h, td]   - 
			layers_in_out["BUS_COACH_HYDIESEL","DIESEL"] * F_t [c,"BUS_COACH_HYDIESEL", h, td]   ) / 1000 , "Diesel", "#D3D3D3", "TWh" 
			> ( PathName & "/input2sankey" & c & ".csv");
			#Diesel-->Freight
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t [c,"TRUCK_DIESEL", h, td]+F_t [c,"BOAT_FREIGHT_DIESEL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Freight", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRUCK_DIESEL","DIESEL"] * F_t [c,"TRUCK_DIESEL", h, td] -layers_in_out["BOAT_FREIGHT_DIESEL","DIESEL"] * F_t [c,"BOAT_FREIGHT_DIESEL", h, td]  ) / 1000 , "Diesel", "#D3D3D3", "TWh" 
			> ( PathName & "/input2sankey" & c & ".csv");

			
			## Bioethanol and Biodiesel
			#Bioethanol --> Gasoline 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_exterior [c,"BIOETHANOL", h, td] + R_t_local [c,"BIOETHANOL", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Bioethanol" , "Gasoline", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]} (layers_in_out["BIOETHANOL","GASOLINE"] * R_t_exterior [c,"BIOETHANOL", h, td] + layers_in_out["BIOETHANOL","GASOLINE"] * R_t_local [c,"BIOETHANOL", h, td] ) / 1000 ,  "Gasoline", "#808080", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			#Biodiesel --> Diesel 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_exterior [c,"BIODIESEL", h, td] + R_t_local [c,"BIODIESEL", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Biodiesel" , "Diesel", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]} (layers_in_out["BIODIESEL","DIESEL"] * R_t_exterior [c,"BIODIESEL", h, td] + layers_in_out["BIODIESEL","DIESEL"] * R_t_local [c,"BIODIESEL", h, td] ) / 1000 , "Diesel", "#D3D3D3", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			
			
			## Natural Gas
			
			#NG Fossil extracted  --> NG
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_exterior [c,"NG", h, td] + R_t_local [c,"NG", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "NG Fossil" , "NG", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["NG","NG"] * R_t_exterior [c,"NG", h, td] + layers_in_out["NG","NG"] * R_t_local [c,"NG", h, td] ) / 1000 , "NG", "#FFD700", "TWh" 
			> ( PathName & "/input2sankey" & c & ".csv");
			
			#SNG  --> NG
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_exterior [c,"SNG", h, td] + R_t_local [c,"SNG", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "SNG" , "NG", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["SNG","NG"] * R_t_exterior [c,"SNG", h, td] + layers_in_out["SNG","NG"] * R_t_local [c,"SNG", h, td] ) / 1000 , "NG", "#FFD700", "TWh" 
			> ( PathName & "/input2sankey" & c & ".csv");
			
			
			
			#NG --> Freight
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t [c,"TRUCK_NG", h, td] + F_t [c,"BOAT_FREIGHT_NG", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Freight", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRUCK_NG","NG"] * F_t [c,"TRUCK_NG", h, td] -layers_in_out["BOAT_FREIGHT_NG","NG"] * F_t [c,"BOAT_FREIGHT_NG", h, td] ) / 1000 , "NG", "#FFD700", "TWh" 
			> ( PathName & "/input2sankey" & c & ".csv");
			#NG --> Mob Priv
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"CAR_NG", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_NG","NG"] * F_t [c,"CAR_NG", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			#NG --> Mob Pub
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"BUS_COACH_CNG_STOICH", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Mob public", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BUS_COACH_CNG_STOICH","NG"] * F_t [c,"BUS_COACH_CNG_STOICH", h, td]  ) / 1000 , 
			"NG", "#FFD700", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#NG --> H2
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"H2_NG", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "H2", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["H2_NG","NG"] * F_t [c,"H2_NG", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			#NG --> CCGT
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"CCGT", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "CCGT", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CCGT","NG"] * F_t [c,"CCGT", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			#CCGT --> Elec
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"CCGT", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CCGT" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["CCGT","ELECTRICITY"] * F_t [c,"CCGT", h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			
			#NG --> CHP
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_COGEN_GAS", h, td] + F_t [c,"DHN_COGEN_GAS", h, 
			td] + F_t [c,"DEC_COGEN_GAS", h, td] + F_t [c,"DEC_ADVCOGEN_GAS", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_COGEN_GAS","NG"] * F_t [c,"IND_COGEN_GAS", h, td]   - 
			layers_in_out["DHN_COGEN_GAS","NG"] * F_t [c,"DHN_COGEN_GAS", h, td]   - layers_in_out["DEC_COGEN_GAS","NG"] * F_t 
			[c,"DEC_COGEN_GAS", h, td]   - layers_in_out["DEC_ADVCOGEN_GAS","NG"] * F_t [c,"DEC_ADVCOGEN_GAS", h, td]  ) / 
			1000 , "NG", "#FFD700", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#NG --> HP
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DEC_THHP_GAS", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "HPs", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DEC_THHP_GAS","NG"] * F_t [c,"DEC_THHP_GAS", h, td]  ) / 1000 , "NG", "#FFD700", 
			"TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#NG --> Boilers 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_BOILER_GAS", h, td] + F_t [c,"DHN_BOILER_GAS", 
			h, td] + F_t [c,"DEC_BOILER_GAS", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_BOILER_GAS","NG"] * F_t [c,"IND_BOILER_GAS", h, td]   - 
			layers_in_out["DHN_BOILER_GAS","NG"] * F_t [c,"DHN_BOILER_GAS", h, td]   - layers_in_out["DEC_BOILER_GAS","NG"] * F_t 
			[c,"DEC_BOILER_GAS", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#NG --> Non-Energy
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"NON_ENERGY_NG", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Non-Energy", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["NON_ENERGY_NG","NG"] * F_t [c,"NON_ENERGY_NG", h, td]  ) / 1000 , "NG", 
			"#FFD700", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			## Electricity production
			
			#Elec import from outside system
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(R_t_exterior [c,"ELECTRICITY", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Electricity" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["ELECTRICITY","ELECTRICITY"] * R_t_exterior [c,"ELECTRICITY", h, td]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#Uranium --> Elec
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"NUCLEAR", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Nuclear" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["NUCLEAR","ELECTRICITY"] * F_t [c,"NUCLEAR", h, td]  ) / 1000 , "Nuclear", 
			"#FFC0CB", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#WindOn --> Elec
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F[c,"WIND_ONSHORE"]*c_p_t["WIND_ONSHORE",c,h,td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wind Onshore" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["WIND_ONSHORE","ELECTRICITY"] * F[c,"WIND_ONSHORE"]*c_p_t["WIND_ONSHORE",c,h,td]  ) / 1000 , "Wind Onshore", "#27AE34", "TWh" 
			> ( PathName & "/input2sankey" & c & ".csv");
			#WindOff --> Elec
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F[c,"WIND_OFFSHORE"]*c_p_t["WIND_OFFSHORE",c,h,td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wind Offshore" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["WIND_OFFSHORE","ELECTRICITY"] * F[c,"WIND_OFFSHORE"]*c_p_t["WIND_OFFSHORE",c,h,td]  ) / 1000 , "Wind Offshore", "#27AE34", "TWh" 
			> ( PathName & "/input2sankey" & c & ".csv");
			#HydroDam --> Elec
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"HYDRO_DAM", h, td] )  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Hydro Dams" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["HYDRO_DAM","ELECTRICITY"] * F_t [c,"HYDRO_DAM", h, td]  ) / 1000 , "Hydro Dam", "#00CED1", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			#HydroRiver --> Elec
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"HYDRO_RIVER", h, td] )  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Hydro River" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["HYDRO_RIVER","ELECTRICITY"] * F_t [c,"HYDRO_RIVER", h, td]   ) / 1000 , "Hydro River", "#0000FF", 
			"TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			#Coal --> Elec
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"COAL_US", h, td] + F_t [c,"COAL_IGCC", h, td]) ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Coal" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["COAL_US","COAL"] * F_t [c,"COAL_US", h, td]   - layers_in_out["COAL_IGCC","COAL"] 
			* F_t [c,"COAL_IGCC", h, td]  ) / 1000 , "Coal", "#A0522D", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"IND_BOILER_COAL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Coal" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_BOILER_COAL","COAL"] * F_t [c,"IND_BOILER_COAL", h, td]  ) / 1000 , "Coal", 
			"#A0522D", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			# Solar --> Elec
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F [c,"PV"] *c_p_t["PV",c,h,td] + F [c,"U_PV"] *c_p_t["U_PV",c,h,td] ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar PV" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["PV","ELECTRICITY"] * F [c,"PV"] *c_p_t["PV",c,h,td] + layers_in_out["U_PV","ELECTRICITY"] * F [c,"U_PV"] *c_p_t["U_PV",c,h,td] ) / 1000 , "Solar", "#FFFF00", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			# Solar --> Heat LT Dec 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DEC_SOLAR", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Heat LT Dec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(layers_in_out["DEC_SOLAR","HEAT_LOW_T_DECEN"] * (F_t [c,"DEC_SOLAR", h, td])# SUPPRESSED # - Solar_excess [ h, td] ) 
					-((max(Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] )))
					)/ 1000
					, "Solar", "#FFFF00", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			# Solar --> Dec Sto.
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DEC_SOLAR", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Dec. Sto", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					((max(Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
					  (max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] ))
					)/ 1000
					, "Solar", "#FFFF00", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			#Solar --> DHN 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c, "DHN_SOLAR", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["DHN_SOLAR","HEAT_LOW_T_DHN"] * F [c, "DHN_SOLAR"] * c_p_t["DHN_SOLAR",c, h,td]  ) / 1000 , "Solar", "#FFFF00", "TWh" > #From F_t -> F <=> taking into account curtailment
			( PathName & "/input2sankey" & c & ".csv");
			
			
			# Geothermal --> Elec
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"GEOTHERMAL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Geothermal" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["GEOTHERMAL","ELECTRICITY"] * F_t [c,"GEOTHERMAL", h, td]  ) / 1000 , "Geothermal", 
			"#FF0000", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			# Geothermal --> DHN
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DHN_DEEP_GEO", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Geothermal" , "DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["DHN_DEEP_GEO","HEAT_LOW_T_DHN"] * F_t [c,"DHN_DEEP_GEO", h, td]  ) / 1000 , 
			"Geothermal", "#FF0000", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			# Waste --> CHP
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_COGEN_WASTE", h, td] + F_t 
			[c,"DHN_COGEN_WASTE", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Waste" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_COGEN_WASTE","WASTE"] * F_t [c,"IND_COGEN_WASTE", h, td]   
			-layers_in_out["DHN_COGEN_WASTE","WASTE"] * F_t [c,"DHN_COGEN_WASTE", h, td]  ) / 1000 , "Waste", "#808000", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			# Waste --> Boilers	
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"IND_BOILER_WASTE", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Waste" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_BOILER_WASTE","WASTE"] * F_t [c,"IND_BOILER_WASTE", h, td]  ) / 1000 , 
			"Waste", "#808000", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			#Wet biomass --> CHP
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DHN_COGEN_WET_BIOMASS", h, td] + F_t [c,"DHN_COGEN_BIO_HYDROLYSIS", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wet Biomass" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DHN_COGEN_WET_BIOMASS","WET_BIOMASS"] * F_t [c,"DHN_COGEN_WET_BIOMASS", h, td] -layers_in_out["DHN_COGEN_BIO_HYDROLYSIS","WET_BIOMASS"] * F_t [c,"DHN_COGEN_BIO_HYDROLYSIS", h, td]  ) / 1000 , "Wet Biomass", "#336600", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			#Wet biomass --> SNG
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"BIOMETHANATION", h, td] + F_t [c,"BIO_HYDROLYSIS", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Wet Biomass" , "NG", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BIOMETHANATION","WET_BIOMASS"] * F_t [c,"BIOMETHANATION", h, td] -layers_in_out["BIO_HYDROLYSIS","WET_BIOMASS"] * F_t [c,"BIO_HYDROLYSIS", h, td]) / 1000 , "Wet Biomass", "#336600", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			
			# Oil --> CHP
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DEC_COGEN_OIL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DEC_COGEN_OIL","LFO"] * F_t [c,"DEC_COGEN_OIL", h, td]  ) / 1000 , "Oil", 
			"#8B008B", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			# Oil --> Boilers 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_BOILER_OIL", h, td] + F_t [c,"DHN_BOILER_OIL", 
			h, td] + F_t [c,"DEC_BOILER_OIL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_BOILER_OIL","LFO"] * F_t [c,"IND_BOILER_OIL", h, td]   - 
			layers_in_out["DHN_BOILER_OIL","LFO"] * F_t [c,"DHN_BOILER_OIL", h, td]   - layers_in_out["DEC_BOILER_OIL","LFO"] * 
			F_t [c,"DEC_BOILER_OIL", h, td]  ) / 1000 , "Oil", "#8B008B", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#Oil --> Non-Energy
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"NON_ENERGY_OIL", h, td]  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "Non-Energy", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["NON_ENERGY_OIL","LFO"] * F_t [c,"NON_ENERGY_OIL", h, td]  ) / 1000 , "Oil", 
			"#8B008B", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			
			# Wood --> H2
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"H2_BIOMASS", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "H2", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["H2_BIOMASS","WOOD"] * F_t [c,"H2_BIOMASS", h, td]  ) / 1000 , "Wood", "#CD853F", 
			"TWh" > ( PathName & "/input2sankey" & c & ".csv");
			# Wood --> SNG
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"GASIFICATION_SNG", h, td] )  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "NG", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["GASIFICATION_SNG","WOOD"] * F_t [c,"GASIFICATION_SNG", h, td]) / 1000 , "Wood", "#CD853F", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			# Wood --> SLF
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"PYROLYSIS", h, 
			td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "SLF", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}( -layers_in_out["PYROLYSIS","WOOD"] * F_t [c,"PYROLYSIS", h, td]  ) / 1000 , "Wood", "#CD853F", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");			
			
			
			
			# Wood --> CHP
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_COGEN_WOOD", h, td] + F_t [c,"DHN_COGEN_WOOD", 
			h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_COGEN_WOOD","WOOD"] * F_t [c,"IND_COGEN_WOOD", h, td]   - 
			layers_in_out["DHN_COGEN_WOOD","WOOD"] * F_t [c,"DHN_COGEN_WOOD", h, td]  ) / 1000 , "Wood", "#CD853F", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			# Wood --> Boilers 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_BOILER_WOOD", h, td] + F_t 
			[c,"DHN_BOILER_WOOD", h, td] + F_t [c,"DEC_BOILER_WOOD", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["IND_BOILER_WOOD","WOOD"] * F_t [c,"IND_BOILER_WOOD", h, td]   - 
			layers_in_out["DHN_BOILER_WOOD","WOOD"] * F_t [c,"DHN_BOILER_WOOD", h, td]   - layers_in_out["DEC_BOILER_WOOD","WOOD"] * 
			F_t [c,"DEC_BOILER_WOOD", h, td]  ) / 1000 , "Wood", "#CD853F", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			
			#------------------------------------------
			# SANKEY - Electricity use
			#------------------------------------------
			#Elec --> Mob Priv 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"CAR_PHEV", h, td] + F_t [c,"CAR_BEV", h, td]) ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_PHEV","ELECTRICITY"] * F_t [c,"CAR_PHEV", h, td]   - 
			layers_in_out["CAR_BEV","ELECTRICITY"] * F_t [c,"CAR_BEV", h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			#Elec --> Mob Pub 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"TRAIN_PUB", h, td] + F_t [c,"TRAMWAY_TROLLEY", h, 
			td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Mob public", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRAIN_PUB","ELECTRICITY"] * F_t [c,"TRAIN_PUB", h, td]   - 
			layers_in_out["TRAMWAY_TROLLEY","ELECTRICITY"] * F_t [c,"TRAMWAY_TROLLEY", h, td]  ) / 1000 , "Electricity", "#00BFFF", 
			"TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#Elec --> Freight 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"TRAIN_FREIGHT", h, td] + F_t [c,"TRUCK_ELEC", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Freight", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRAIN_FREIGHT","ELECTRICITY"] * F_t [c,"TRAIN_FREIGHT", h, td] -layers_in_out["TRUCK_ELEC","ELECTRICITY"] * F_t [c,"TRUCK_ELEC", h, td] ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#Elec --> Loss
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses [c,"ELECTRICITY", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Loss", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses 
			[c,"ELECTRICITY", h, td]    ) / 1000 
			, "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#Elec --> Elec Demand 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses [c,"ELECTRICITY", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Elec demand", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((End_uses 
			[c,"ELECTRICITY", h, td]  - Network_losses [c,"ELECTRICITY", h, td] - sum {i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"]} (Storage_out[c, i, "ELECTRICITY", h, td]))   
			)/ 1000 , "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
				
			#Elec --> SLF	
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"SYN_METHANOLATION", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "SLF", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SYN_METHANOLATION","ELECTRICITY"] * F_t [c,"SYN_METHANOLATION", h, td]   ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			#Elec --> SNG	
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"SYN_METHANOLATION", h, td]+F_t [c,"SYN_METHANATION", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "NG", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SYN_METHANATION","ELECTRICITY"] * F_t [c,"SYN_METHANATION", h, td]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");		
			
			
			#New boxes for Space Cooling and Process Cooling	
			
			#Elec --> Cold 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"BIG_SPLIT", h, td]   ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Cold", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BIG_SPLIT","ELECTRICITY"] * F_t [c,"BIG_SPLIT", h, td] ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			#Elec --> Chiller
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"CHILLER_WC",h,td]  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Chiller", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CHILLER_WC","ELECTRICITY"] * F_t [c,"CHILLER_WC", h, td] ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");		
				
				
			# Elec --> Storage 
			if sum{i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "ELECTRICITY", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Storage", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}       (sum {i 
			in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] }(Storage_in[c, i, "ELECTRICITY", h, td]             
			)                                                                                         )/ 1000 , "Electricity", "#00BFFF", 
			"TWh" > ( PathName & "/input2sankey" & c & ".csv");
			# Storage --> Elec Demand 
			if sum{i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "ELECTRICITY", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Storage" , "Elec demand", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(sum {i 
			in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] }                                                        (Storage_out[c, i, "ELECTRICITY", h, td] / storage_eff_out [i, 
			"ELECTRICITY"])  )/ 1000 , "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#Storage --> Loss
			if sum{i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "ELECTRICITY", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Storage" , "Loss", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (sum {i 
			in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] }((Storage_in[c, i, "ELECTRICITY", h, td])- (Storage_out[c, i, "ELECTRICITY", h, td] / storage_eff_out [i, 
			"ELECTRICITY"]))  )/ 1000 , "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");

			#Elec --> HP 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DHN_HP_ELEC", h, td] + F_t [c,"DEC_HP_ELEC", h, 
			td]) ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "HPs", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DHN_HP_ELEC","ELECTRICITY"] * F_t [c,"DHN_HP_ELEC", h, td]   - 
			layers_in_out["DEC_HP_ELEC","ELECTRICITY"] * F_t [c,"DEC_HP_ELEC", h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			#Elec --> H2 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"H2_ELECTROLYSIS", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "H2", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["H2_ELECTROLYSIS","ELECTRICITY"] * F_t [c,"H2_ELECTROLYSIS", h, td]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#Elec --> Heat LT Dec 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DEC_DIRECT_ELEC", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Heat LT Dec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["DEC_DIRECT_ELEC","HEAT_LOW_T_DECEN"] * F_t [c,"DEC_DIRECT_ELEC", h, td]  
					- ((max(Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] )))) / 1000 
			, "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#Elec --> Dec Sto. 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]: Storage_in[c,"TS_DEC_DIRECT_ELEC", "HEAT_LOW_T_DECEN", h, td] > Storage_out[c,"TS_DEC_DIRECT_ELEC", "HEAT_LOW_T_DECEN", h, td] } 
			    	((Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td])*(1-F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] ))) >10 then
						printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Dec. Sto", 		 
							sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
							((max(Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] ))) / 1000 
						, "Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");		
			#Elec --> HT Heat 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"IND_DIRECT_ELEC", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Heat HT", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["IND_DIRECT_ELEC","HEAT_HIGH_T"] * F_t [c,"IND_DIRECT_ELEC", h, td]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			## H2 imports
			#H2 imports  --> H2
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_exterior [c,"H2", h, td] + R_t_local [c,"H2", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "H2 imports" , "H2", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["H2","H2"] * R_t_exterior [c,"H2", h, td] + layers_in_out["H2","H2"] * R_t_local [c,"H2", h, td] ) / 1000 , "H2", 
			"#FF00FF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			
			## H2 use
			
			#H2 --> Freight
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"TRUCK_FUEL_CELL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Freight", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["TRUCK_FUEL_CELL","H2"] * F_t [c,"TRUCK_FUEL_CELL", h, td]  ) / 1000 , "H2", 
			"#FF00FF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#H2 --> CHP 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DEC_ADVCOGEN_H2", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["DEC_ADVCOGEN_H2","H2"] * F_t [c,"DEC_ADVCOGEN_H2", h, td]  ) / 1000 , "H2", 
			"#FF00FF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#H2 --> Mob Priv
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"CAR_FUEL_CELL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["CAR_FUEL_CELL","H2"] * F_t [c,"CAR_FUEL_CELL", h, td]  ) / 1000 , "H2", 
			"#FF00FF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#H2 --> Mob Pub 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"BUS_COACH_FC_HYBRIDH2", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Mob public", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["BUS_COACH_FC_HYBRIDH2","H2"] * F_t [c,"BUS_COACH_FC_HYBRIDH2", h, td]  ) / 1000 , 
			"H2", "#FF00FF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			#H2 --> SNG
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"SYN_METHANATION", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "NG", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SYN_METHANATION","H2"] * F_t [c,"SYN_METHANATION", h, td]   ) / 1000 , "H2", "#FF00FF", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			#H2 --> SLF
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"SYN_METHANOLATION", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "SLF", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SYN_METHANOLATION","H2"] * F_t [c,"SYN_METHANOLATION", h, td]  ) / 1000 , "H2", "#FF00FF", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");			
			#
			
			#------------------------------------------
			# SANKEY - HEATING
			#------------------------------------------
			
			## CHP
			#CHP --> Elec 
			if sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [ c, i, h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Elec", sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"ELECTRICITY"] * F_t [c, i, h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			#CHP --> Heat LT Dec 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DEC_COGEN_GAS", h, td] + F_t [c,"DEC_COGEN_OIL", h, 
			td] + F_t [c,"DEC_ADVCOGEN_GAS", h, td] + F_t [c,"DEC_ADVCOGEN_H2", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Heat LT Dec", 
					sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
						(layers_in_out[i,"HEAT_LOW_T_DECEN"] * F_t [c, i, h, td]  
						 -((max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
							(max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
							(max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
							(max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] )))
						) / 1000 
						, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#CHP --> Dec. Sto 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
								    ((max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] )))> 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Dec. Sto", 
					sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
						((max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
							(max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
							(max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
							(max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] ))
						) / 1000 
						, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#CHP --> DHN 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DHN_COGEN_GAS", h, td] + F_t [c,"DHN_COGEN_WOOD", 
			h, td] + F_t [c,"DHN_COGEN_WASTE", h, td] + F_t [c,"DHN_COGEN_WET_BIOMASS", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "DHN", sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"HEAT_LOW_T_DHN"] * F_t [c, i, h, td]  ) / 1000 , "Heat LT", "#FA8072", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			#CHP --> Heat HT 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_COGEN_GAS", h, td] + F_t [c,"IND_COGEN_WOOD", 
			h, td] + F_t [c,"IND_COGEN_WASTE", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Heat HT", sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"HEAT_HIGH_T"] * F_t [c, i, h, td]  ) / 1000 , "Heat HT", "#DC143C", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			# HP --> Heat LT Dec. 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DEC_HP_ELEC", h, td] + F_t [c,"DEC_THHP_GAS", h, 
			td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "Heat LT Dec", 
					sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					((layers_in_out["DEC_HP_ELEC","HEAT_LOW_T_DECEN"] * F_t [c,"DEC_HP_ELEC", h, td]   +
					layers_in_out["DEC_THHP_GAS","HEAT_LOW_T_DECEN"] * F_t [c,"DEC_THHP_GAS", h, td]  
					-((max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
			     	  (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] )))
					) / 1000 ) 
					, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#HP --> DHN 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [c,"DHN_HP_ELEC", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}((layers_in_out["DHN_HP_ELEC","HEAT_LOW_T_DHN"] * F_t [c,"DHN_HP_ELEC", h, td]  ) / 1000  - ( 
			(Storage_in [c,"TS_DEC_HP_ELEC", "ELECTRICITY", h, td]) )/ 1000), "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			# HP --> Dec Sto.
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
			    		((max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
			     	    (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] ))) >10 then
						printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "Dec. Sto", 		 
							sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
							((max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
							 (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] )))/1000
							,"Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");	
			
			
			
			
			## Biofuels
			
			#SLF --> Elec 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"PYROLYSIS", h, 
			td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "SLF" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}( layers_in_out["PYROLYSIS","ELECTRICITY"] * F_t [c,"PYROLYSIS", h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			#SNG --> Elec 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"GASIFICATION_SNG", h, td] + F_t [c,"BIO_HYDROLYSIS", h, td] )  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["GASIFICATION_SNG","ELECTRICITY"] * F_t [c,"GASIFICATION_SNG", h, td] + layers_in_out["BIO_HYDROLYSIS","ELECTRICITY"] * F_t [c,"BIO_HYDROLYSIS", h, td]   ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");			
			
			
			
			#SNG --> DHN 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"GASIFICATION_SNG", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG" , "DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["GASIFICATION_SNG","HEAT_LOW_T_DHN"] * F_t [c,"GASIFICATION_SNG", h, td]  ) / 1000, 
			"Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			# Boilers--> Heat LT Dec 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DEC_BOILER_GAS", h, td] + F_t [c,"DEC_BOILER_WOOD", 
			h, td] + F_t [c,"DEC_BOILER_OIL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Heat LT Dec", 
							sum{i in BOILERS, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
							   (layers_in_out[i,"HEAT_LOW_T_DECEN"] * F_t [c, i, h, td]  
							    -((max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
								  (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
								  (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] )))
									 ) / 1000 ,
						"Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
						
			#Boilers --> Dec. Sto. 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
								    ((max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] ))) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Dec. Sto", 
								sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
								    ((max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
								     (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] ))
								 ) / 1000 ,
						"Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			#Boilers --> DHN 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"DHN_BOILER_GAS", h, td] + F_t [c,"DHN_BOILER_WOOD", 
			h, td] + F_t [c,"DHN_BOILER_OIL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "DHN", sum{i in BOILERS, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"HEAT_LOW_T_DHN"] * F_t [c, i, h, td]  ) / 1000 , "Heat LT", "#FA8072", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			#Boilers --> Heat HT
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"IND_BOILER_GAS", h, td] + F_t [c,"IND_BOILER_WOOD", 
			h, td] + F_t [c,"IND_BOILER_OIL", h, td] + F_t [c,"IND_BOILER_COAL", h, td] + F_t [c,"IND_BOILER_WASTE", h, td])  ) > 10 
			then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Heat HT", sum{i in BOILERS, t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[i,"HEAT_HIGH_T"] * F_t [c, i, h, td]  ) / 1000 , "Heat HT", "#DC143C", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			#Dec Sto. --> Heat LT Dec 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t], i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]: Storage_in[c, i, "HEAT_LOW_T_DECEN", h, td] < Storage_out[c, i, "HEAT_LOW_T_DECEN", h, td] } 
									(Storage_out[c, i , "HEAT_LOW_T_DECEN", h, td] - Storage_in[c, i , "HEAT_LOW_T_DECEN", h, td]) > 10 then
			   printf "%s,%s,%.2f,%s,%s,%s\n", "Dec. Sto" , "Heat LT Dec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t], i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]: Storage_in[c, i, "HEAT_LOW_T_DECEN", h, td] < Storage_out[c, i, "HEAT_LOW_T_DECEN", h, td] } 
									(Storage_out[c, i , "HEAT_LOW_T_DECEN", h, td] - Storage_in[c, i , "HEAT_LOW_T_DECEN", h, td])/1000 , "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			# DHN --> Heat LT DHN 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses[c,"HEAT_LOW_T_DHN", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "Heat LT DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
				(sum {i in TECHNOLOGIES diff STORAGE_TECH } (layers_in_out[i, "HEAT_LOW_T_DHN"] * F_t [c, i, h, td]  ) 
				- Network_losses [c,"HEAT_LOW_T_DHN", h, td]   
				- sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"]} (Storage_in  [c, i, "HEAT_LOW_T_DHN", h, td])) / 1000
				, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
				
			#DHN --> DHN Loss 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses [c,"HEAT_LOW_T_DHN", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "Loss DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses 
			[c, "HEAT_LOW_T_DHN", h, td]  ) / 1000 , "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			
			# DHN --> DHN storage :
			# Sto in  : sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Storage_in  [i, "HEAT_LOW_T_DHN", h, td])
			# Sto out : sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Storage_out[c, i, "HEAT_LOW_T_DHN", h, td])
			
			if sum{i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in  [c, i, "HEAT_LOW_T_DHN", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "DHN Sto", sum{i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Storage_in  [c, i, "HEAT_LOW_T_DHN", h, td])/1000
				, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			#DHN Sto. --> Heat LT DHN 
			if sum{i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_out  [c, i, "HEAT_LOW_T_DHN", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN Sto" , "Heat LT DHN", sum{i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (Storage_out  [c, i, "HEAT_LOW_T_DHN", h, td])/1000
				, "Heat LT", "#FA8072", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			
			
			
			#Biofuels --> NG
			#
			#if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"GASIFICATION_SNG", h, td]+F_t [c,"BIOMETHANATION", h, td]+F_t [c,"SYN_METHANATION", h, td])  ) > 10 then
			#	printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "NG", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			#TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["GASIFICATION_SNG","NG"] * F_t [c,"GASIFICATION_SNG", h, td] + layers_in_out["BIOMETHANATION","NG"] * F_t [c,"BIOMETHANATION", h, td] + layers_in_out["SYN_METHANATION","NG"] * F_t [c,"SYN_METHANATION", h, td] ) / 1000 , "NG", "#FFD700", "TWh" > 
			#( PathName & "/input2sankey" & c & ".csv");
			
			#Biofuels --> SLF
			#if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"PYROLYSIS", h, td]+F_t [c,"SYN_METHANOLATION", h, td])  ) > 10 then
			#printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "SLF", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			#TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["PYROLYSIS","SLF"] * F_t [c,"PYROLYSIS", h, td] +layers_in_out["SYN_METHANOLATION","SLF"] * F_t [c,"SYN_METHANOLATION", h, td]   ) / 1000 , "SLF", "#FFD700", "TWh" > 
			#( PathName & "/input2sankey" & c & ".csv");	


			#SLF imports  --> SLF
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_exterior [c,"SLF", h, td] + R_t_local [c,"SLF", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "SLF imports" , "SLF", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["SLF","SLF"] * R_t_exterior [c,"SLF", h, td] + layers_in_out["SLF","SLF"] * R_t_local [c,"SLF", h, td] ) / 1000 , "SLF", "#8C028C", "TWh" 
			> ( PathName & "/input2sankey" & c & ".csv");
			
			#SLF --> Diesel 
				if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"SLF_TO_DIESEL", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "SLF" , "Diesel", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SLF_TO_DIESEL","SLF"] * F_t [c,"SLF_TO_DIESEL", h, td]   ) / 1000 , "SLF", "#8C028C", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			#SLF --> Gasoline
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"SLF_TO_GASOLINE", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "SLF" , "Gasoline", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SLF_TO_GASOLINE","SLF"] * F_t [c,"SLF_TO_GASOLINE", h, td]   ) / 1000 , "SLF", "#8C028C", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");   
			
			#SLF --> LFO
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [c,"SLF_TO_LFO", h, td])  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "SLF" , "Oil", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out["SLF_TO_LFO","SLF"] * F_t [c,"SLF_TO_LFO", h, td]   ) / 1000 , "SLF", "#8C028C", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			# Heat HT --> HT Storage 
			if sum{i in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "HEAT_HIGH_T", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Heat HT" , "HT Storage", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}       (sum {i 
			in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"] }(Storage_in[c, i, "HEAT_HIGH_T", h, td] ))/ 1000 , "Heat HT", "#DC143C", 
			"TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			#HT Storage --> Ind Heat Demand  
			if sum{i in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "HEAT_HIGH_T", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "HT Storage" , "Ind Heat Demand", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(sum {i 
			in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"] }  (Storage_out[c, i, "HEAT_HIGH_T", h, td]  )  )/ 1000 , "Heat HT", "#DC143C", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			#HT Storage --> Loss
			#if sum{i in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "HEAT_HIGH_T", h, td]) > 10 then
			#	printf "%s,%s,%.2f,%s,%s,%s\n", "HT Storage" , "Loss", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (sum {i 
			#in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"] }((Storage_in[c, i, "HEAT_HIGH_T", h, td])- (Storage_out[c, i, "HEAT_HIGH_T", h, td] / storage_eff_out [i, 
			#"HEAT_HIGH_T"]))  )/ 1000 , "Heat HT", "#DC143C", "TWh" > ( PathName & "/input2sankey" & c & ".csv");

			#Heat HT --> Ind Heat Demand 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses [c,"HEAT_HIGH_T", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Heat HT" , "Ind Heat Demand", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((End_uses 
			[c,"HEAT_HIGH_T", h, td] - sum {i in STORAGE_OF_END_USES_TYPES["HEAT_HIGH_T"]} (Storage_out[c, i, "HEAT_HIGH_T", h, td]))   
			)/ 1000 , "Heat HT", "#DC143C", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			
			# Cold --> Cold Storage 
			if sum{i in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "SPACE_COOLING", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Cold" , "Cold Storage", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}       (sum {i 
			in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"] }(Storage_in[c, i, "SPACE_COOLING", h, td]             
			)                                                                                         )/ 1000 , "Cold", "#00CED1", 
			"TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			# Cold Storage --> Space Cooling 
			if sum{i in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_out[c, i, "SPACE_COOLING", h, td]) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Cold Storage" , "Space Cooling", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(sum {i 
			in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"] } (Storage_out[c, i, "SPACE_COOLING", h, td]  )  )/ 1000 , "Cold", "#00CED1", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			# Cold Storage --> Loss
			#if sum{i in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in[c, i, "SPACE_COOLING", h, td]) > 10 then
			#	printf "%s,%s,%.2f,%s,%s,%s\n", "Cold Storage" , "Cold Loss", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (sum {i 
			#in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"] }((Storage_in[c, i, "SPACE_COOLING", h, td])- (Storage_out[c, i, "SPACE_COOLING", h, td] / storage_eff_out [i, 
			#"SPACE_COOLING"]))  )/ 1000 , "Cold", "#00CED1", "TWh" > ( PathName & "/input2sankey" & c & ".csv");

			#Cold  --> Space Cooling 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses [c,"SPACE_COOLING", h, td] ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Cold" , "Space Cooling", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((End_uses 
			[c,"SPACE_COOLING", h, td] - sum {i in STORAGE_OF_END_USES_TYPES["SPACE_COOLING"]} (Storage_out[c, i, "SPACE_COOLING", h, td]) ))  / 1000 , "Cold", "#00CED1", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
		

			#Chiller  --> Process Cooling 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses [c,"PROCESS_COOLING", h, td]  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Chiller" , "Process Cooling", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(( End_uses 
			[c,"PROCESS_COOLING", h, td]))  / 1000 , "Cold", "#00CED1", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
		
			#Elec --> Curt
			if Curt [c]  > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Curt", Curt [c] / 1000 , "Electricity", "#00BFFF", "TWh" > 
			( PathName & "/input2sankey" & c & ".csv");
			
			
			## IMPORTS 
			
			
			
			#Elec import --> Elec 
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(R_t_import [c,"ELECTRICITY", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec Import" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(R_t_import [c,"ELECTRICITY", h, td]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			#NG Import --> NG
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(R_t_import [c,"NG", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG Import" , "NG", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(R_t_import [c,"NG", h, td]  ) / 1000 , 
			"NG", "#FFD700", "TWh" > ( PathName & "/input2sankey" & c & ".csv");

			#SLF Import --> NG
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(R_t_import [c,"SLF", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "SLF Import" , "SLF", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(R_t_import [c,"SLF", h, td]  ) / 1000 , 
			"SLF", "#8C028C", "TWh" > ( PathName & "/input2sankey" & c & ".csv");			
			
			#Wood Import --> Wood
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(R_t_import [c,"WOOD", h, td]  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Wood Import" , "Wood", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(R_t_import [c,"WOOD", h, td]  ) / 1000 , 
			"Wood", "#CD853F", "TWh" > ( PathName & "/input2sankey" & c & ".csv");	
			
			#Waste Import --> Waste
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(R_t_import [c,"WASTE", h, td]  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Waste Import" , "Waste", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(R_t_import [c,"WASTE", h, td]  ) / 1000 , 
			"Waste", "#808000", "TWh" > ( PathName & "/input2sankey" & c & ".csv");	

			##LOCAL & EXTERIOR
			
			
			#Wood local extracted  --> Wood
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_local [c,"WOOD", h, td] )  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Local Wood" , "Wood", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["WOOD","WOOD"] * R_t_local [c,"WOOD", h, td] ) / 1000 , "Wood", "#CD853F", "TWh" 
			> ( PathName & "/input2sankey" & c & ".csv");

			#Waste local  --> Wood
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((R_t_local [c,"WASTE", h, td] )  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Local Waste" , "Waste", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out["WASTE","WASTE"] * R_t_local [c,"WASTE", h, td] ) / 1000 , "Waste", "#808000", "TWh" 
			> ( PathName & "/input2sankey" & c & ".csv");	
			
			## EXPORTS
			
			#Elec exports
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(R_t_export [c,"ELECTRICITY", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Elec Export", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(R_t_export [c,"ELECTRICITY", h, td]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > ( PathName & "/input2sankey" & c & ".csv"); 
			
			#NG Export --> NG
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(R_t_export [c,"NG", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG", "NG Export" , sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(R_t_export[c,"NG", h, td]  ) / 1000 , 
			"NG", "#FFD700", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
	
			#SLF Export --> SLF
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(R_t_export [c,"SLF", h, td]  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "SLF", "SLF Export" , sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(R_t_export[c,"SLF", h, td]  ) / 1000 , 
			"SLF", "#8C028C", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			#Wood Export --> Wood
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(R_t_export [c,"WOOD", h, td]  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Wood", "Wood Export" , sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(R_t_export[c,"WOOD", h, td]  ) / 1000 , 
			"Wood", "#CD853F", "TWh" > ( PathName & "/input2sankey" & c & ".csv");
			
			
			#Waste Export --> Waste
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(R_t_export [c,"WASTE", h, td]  ) > 10 then
			printf "%s,%s,%.2f,%s,%s,%s\n", "Waste" , "Waste Export", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in 
			TYPICAL_DAY_OF_PERIOD[t]}(R_t_export [c,"WASTE", h, td]  ) / 1000 , 
			"Waste", "#808000", "TWh" > ( PathName & "/input2sankey" & c & ".csv");	
			

			
			
			
			#STORAGE DECENTRALISED :
			# inputs : 
			#     -Direct elec : sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
			#						((max(Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] )))
			#     -HPs         : sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}         
			#						((max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] )))
			#     -Boilers     : sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
			#					    ((max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] )))
			#	  -CHP_dec     : sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
			#					    ((max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(1-F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] )))
			#     -DEC_SOLAR   : sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} 
			#						((max(Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_DIRECT_ELEC"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] ))+
			#						 (max(Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_HP_ELEC"      ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_THHP_GAS"     ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_GAS"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_WOOD"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_BOILER_OIL"   ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_COGEN_GAS"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_ADVCOGEN_GAS" ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_COGEN_OIL"    ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", h, td] ))+
			#					     (max(Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] - Storage_out[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td],0))*(  F_t_solar[c,"DEC_ADVCOGEN_H2"  ,h,td]  /max(0.0001,Storage_in[c,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", h, td] )))
			# outputs :
			# 	  -Storage_out     : sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t], i in TS_DEC} 
			#						(max{0,Storage_out[c, i , "HEAT_LOW_T_DECEN", h, td] - Storage_in[c, i , "HEAT_LOW_T_DECEN", h, td]})

		
		}


		}# END SAVING
